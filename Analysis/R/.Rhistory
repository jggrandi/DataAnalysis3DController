if(qntusers == 3 | qntusers == 4){
U3Trans <- transmute(users, U3Trans = sqrt((Translation.X.3 * Translation.X.3) + (Translation.Y.3 * Translation.Y.3) + (Translation.Z.3 * Translation.Z.3)))
U3Rot <- transmute(users, U3Rot = rad2deg(2*acos(Rotation.W.3)))
U3Scale <- transmute(users, U3Scale = abs(Scalling.3-1))
U3Cam <- transmute(users, U3Cam = rad2deg(2*acos(Camera.W.3)))
}
if(qntusers == 4){
U4Trans <- transmute(users, U4Trans = sqrt((Translation.X.4 * Translation.X.4) + (Translation.Y.4 * Translation.Y.4) + (Translation.Z.4 * Translation.Z.4)))
U4Rot <- transmute(users, U4Rot = rad2deg(2*acos(Rotation.W.4)))
U4Scale <- transmute(users, U4Scale = abs(Scalling.4-1))
U4Cam <- transmute(users, U4Cam = rad2deg(2*acos(Camera.W.4)))
}
if(qntusers == 1 )
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam) #put all together
if(qntusers == 2)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam) #put all together
if(qntusers == 3)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam) #put all together
if(qntusers == 4)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam,U4Trans,U4Rot,U4Scale,U4Cam) #put all together
tidyUsers <- head(tidyUsers,-1)
if(qntusers == 1){
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam) #total camera actions performed by all users;
}
if(qntusers == 2){
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam) #total camera actions performed by all users;
}
if(qntusers == 3){
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam) #total camera actions performed by all users;
}
if(qntusers == 4){
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans + U4Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale + U4Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot + U4Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam + U4Cam) #total camera actions performed by all users;
}
loadTotal <- loadTrans + loadRot + loadScale + loadCam
loadTrans <- head(loadTrans,-1) # remove the last row
loadScale <- head(loadScale,-1)
loadRot <- head(loadRot,-1)
loadCam <- head(loadCam,-1)
loadTotal <- head(loadTotal,-1)
if(qntusers == 1 | qntusers == 2 |qntusers == 3 | qntusers == 4){
U1Trans <- head(U1Trans,-1) # remove the last row
U1Rot <- head(U1Rot,-1)
U1Scale <- head(U1Scale,-1) # remove the last row
U1Cam <- head(U1Cam,-1) # remove the last row
U1totalTrans <- colSums(U1Trans != 0) / colSums(loadTrans != 0)
U1totalRot <- colSums(U1Rot != 0) / colSums(loadRot != 0)
U1totalScale <- colSums(U1Scale != 0) / colSums(loadScale != 0)
U1totalCam <- colSums(U1Cam != 0) / colSums(loadCam != 0)
allUsersTotalTrans <- U1totalTrans  #value >1 means parallel actions
allUsersTotalRot <- U1totalRot  #value >1 means parallel actions
allUsersTotalScale <- U1totalScale  #value >1 means parallel actions
allUsersTotalCam <- U1totalCam  #value >1 means parallel actions
}
if(qntusers == 2 |qntusers == 3 | qntusers == 4){
U2Trans <- head(U2Trans,-1)
U2Rot <- head(U2Rot,-1)
U2Scale <- head(U2Scale,-1)
U2Cam <- head(U2Cam,-1)
U2totalTrans <- colSums(U2Trans != 0) / colSums(loadTrans != 0)
U2totalRot <- colSums(U2Rot != 0) / colSums(loadRot != 0)
U2totalScale <- colSums(U2Scale != 0) / colSums(loadScale != 0)
U2totalCam <- colSums(U2Cam != 0) / colSums(loadCam != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans #value >1 means parallel actions
allUsersTotalRot <- U1totalRot + U2totalRot #value >1 means parallel actions
allUsersTotalScale <- U1totalScale + U2totalScale #value >1 means parallel actions
allUsersTotalCam <- U1totalCam + U2totalCam #value >1 means parallel actions
}
if(qntusers == 3 | qntusers == 4){
U3Trans <- head(U3Trans,-1)
U3Rot <- head(U3Rot,-1)
U3Scale <- head(U3Scale,-1)
U3Cam <- head(U3Cam,-1)
U3totalTrans <- colSums(U3Trans != 0) / colSums(loadTrans != 0)
U3totalRot <- colSums(U3Rot != 0) / colSums(loadRot != 0)
U3totalScale <- colSums(U3Scale != 0) / colSums(loadScale != 0)
U3totalCam <- colSums(U3Cam != 0) / colSums(loadCam != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans +U3totalTrans#value >1 means parallel actions
allUsersTotalRot <- U1totalRot + U2totalRot +U3totalRot#value >1 means parallel actions
allUsersTotalScale <- U1totalScale + U2totalScale +U3totalScale#value >1 means parallel actions
allUsersTotalCam <- U1totalCam + U2totalCam +U3totalCam #value >1 means parallel actions
}
if(qntusers == 4){
U4Trans <- head(U4Trans,-1)
U4Rot <- head(U4Rot,-1)
U4Scale <- head(U4Scale,-1)
U4Cam <- head(U4Cam,-1)
U4totalTrans <- colSums(U4Trans != 0) / colSums(loadTrans != 0)
U4totalRot <- colSums(U4Rot != 0) / colSums(loadRot != 0)
U4totalScale <- colSums(U4Scale != 0) / colSums(loadScale != 0)
U4totalCam <- colSums(U4Cam != 0) / colSums(loadCam != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans +U3totalTrans +U4totalTrans #value >1 means parallel actions
allUsersTotalRot <- U1totalRot + U2totalRot +U3totalRot +U4totalRot #value >1 means parallel actions
allUsersTotalScale <- U1totalScale + U2totalScale +U3totalScale +U4totalScale #value >1 means parallel actions
allUsersTotalCam <- U1totalCam + U2totalCam +U3totalCam +U4totalCam #value >1 means parallel actions
}
taskTotalLoad <- colSums(loadTotal != 0) / nrow(loadTotal) # task total load
taskTotalLoad <-as.data.frame(taskTotalLoad)
timeWorked <- colSums(loadTotal != 0) # get only the time worked
loadByTotalTime <- colSums(tidyUsers != 0) / nrow(tidyUsers) # load of each action of each users by total time
loadByWorkedTime <- colSums(tidyUsers != 0) / timeWorked # load of each action of each users only in the worked period
loadByWorkedTime <- as.data.frame.array(t(loadByWorkedTime))
loadByTotalTime <- as.data.frame.array(t(loadByTotalTime))
loadByTotalTime <- bind_cols(loadByTotalTime,taskTotalLoad)
if(qntusers == 1){
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
#loadPerUser1_task3 <- loadPerUser #if first
#loadByTotalTime1_task3 <- loadByTotalTime #if first
#loadByWorkedTime1_task3 <- loadByWorkedTime #if first
loadPerUser1_task3 <- bind_rows(loadPerUser1_task3,loadPerUser) # else add to the exiting
loadByTotalTime1_task3<- bind_rows(loadByTotalTime1_task3,loadByTotalTime) # else add to the exiting
loadByWorkedTime1_task3<- bind_rows(loadByWorkedTime1_task3,loadByWorkedTime) # else add to the exiting
}
if(qntusers == 2){
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
#loadPerUser2_task3 <- loadPerUser #if first
#loadByTotalTime2_task3 <- loadByTotalTime #if first
#loadByWorkedTime2_task3 <- loadByWorkedTime #if first
loadPerUser2_task3 <- bind_rows(loadPerUser2_task3,loadPerUser) # else add to the exiting
loadByTotalTime2_task3 <- bind_rows(loadByTotalTime2_task3,loadByTotalTime) # else add to the exiting
loadByWorkedTime2_task3 <- bind_rows(loadByWorkedTime2_task3,loadByWorkedTime) # else add to the exiting
}
if(qntusers == 3){
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
#loadPerUser3_task3 <- loadPerUser #if first
#loadByTotalTime3_task3 <- loadByTotalTime #if first
#loadByWorkedTime3_task3 <- loadByWorkedTime #if first
loadPerUser3_task3 <- bind_rows(loadPerUser3_task3,loadPerUser) # else add to the exiting
loadByTotalTime3_task3 <- bind_rows(loadByTotalTime3_task3,loadByTotalTime) # else add to the exiting
loadByWorkedTime3_task3 <- bind_rows(loadByWorkedTime3_task3,loadByWorkedTime) # else add to the exiting
}
if(qntusers == 4){
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,U4totalTrans,U4totalRot,U4totalScale,U4totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
#loadPerUser4_task3 <- loadPerUser #if first
#loadByTotalTime4_task3 <- loadByTotalTime #if first
#loadByWorkedTime4_task3 <- loadByWorkedTime #if first
loadPerUser4 <- bind_rows(loadPerUser4,loadPerUser) # else add to the exiting
loadByTotalTime4 <- bind_rows(loadByTotalTime4,loadByTotalTime) # else add to the exiting
loadByWorkedTime4 <- bind_rows(loadByWorkedTime4,loadByWorkedTime) # else add to the exiting
}
rm(U1Trans,U2Trans,U3Trans,U4Trans)
rm(U1Rot,U2Rot,U3Rot,U4Rot)
rm(U1Scale,U2Scale,U3Scale,U4Scale)
rm(U1Cam,U2Cam,U3Cam,U4Cam)
rm(U1totalTrans,U2totalTrans,U3totalTrans,U4totalTrans)
rm(U1totalRot,U2totalRot,U3totalRot,U4totalRot)
rm(U1totalScale,U2totalScale,U3totalScale,U4totalScale)
rm(U1totalCam,U2totalCam,U3totalCam,U4totalCam)
rm(loadTrans,loadRot,loadScale,loadCam,loadTotal)
rm(allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
rm(timeWorked,taskTotalLoad, loadByWorkedTime,loadByTotalTime)
rm(tidyUsers,users)
rm(loadPerUser)
qntusers <- 4
if(qntusers == 1)
users <- select(X23.1.Task1.2016.06.10.18.32.14,ends_with(".1"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
if(qntusers == 2)
users <- select(X6.2.Task3.2016.06.07.10.18.40,ends_with(".1"),ends_with(".2"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
if(qntusers == 3)
users <- select(X18.3.Task1.2016.06.09.10.19.23,ends_with(".1"),ends_with(".2"), ends_with(".3"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
if(qntusers == 4)
users <- select(X25.4.Task4.2016.06.17.14.31.44,ends_with(".1"),ends_with(".2"), ends_with(".3"),ends_with(".4"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
users[users>0.999999] <- 1 # remove the noise in the data
rad2deg <- function(rad) {(rad * 180) / (pi)}
U1Trans <- transmute(users, U1Trans = sqrt((Translation.X.1 * Translation.X.1) + (Translation.Y.1 * Translation.Y.1) + (Translation.Z.1 * Translation.Z.1))) #translation magnitude
U1Rot <- transmute(users, U1Rot = rad2deg(2*acos(Rotation.W.1))) #angle of rotation
U1Scale <- transmute(users, U1Scale = abs(Scalling.1-1)) #scale in absolute values
U1Cam <- transmute(users, U1Cam = rad2deg(2*acos(Camera.W.1)))#angle of cam rotation
if(qntusers == 2 |qntusers == 3 | qntusers == 4){
U2Trans <- transmute(users, U2Trans = sqrt((Translation.X.2 * Translation.X.2) + (Translation.Y.2 * Translation.Y.2) + (Translation.Z.2 * Translation.Z.2)))
U2Rot <- transmute(users, U2Rot = rad2deg(2*acos(Rotation.W.2)))
U2Scale <- transmute(users, U2Scale = abs(Scalling.2-1))
U2Cam <- transmute(users, U2Cam = rad2deg(2*acos(Camera.W.2)))
}
if(qntusers == 3 | qntusers == 4){
U3Trans <- transmute(users, U3Trans = sqrt((Translation.X.3 * Translation.X.3) + (Translation.Y.3 * Translation.Y.3) + (Translation.Z.3 * Translation.Z.3)))
U3Rot <- transmute(users, U3Rot = rad2deg(2*acos(Rotation.W.3)))
U3Scale <- transmute(users, U3Scale = abs(Scalling.3-1))
U3Cam <- transmute(users, U3Cam = rad2deg(2*acos(Camera.W.3)))
}
if(qntusers == 4){
U4Trans <- transmute(users, U4Trans = sqrt((Translation.X.4 * Translation.X.4) + (Translation.Y.4 * Translation.Y.4) + (Translation.Z.4 * Translation.Z.4)))
U4Rot <- transmute(users, U4Rot = rad2deg(2*acos(Rotation.W.4)))
U4Scale <- transmute(users, U4Scale = abs(Scalling.4-1))
U4Cam <- transmute(users, U4Cam = rad2deg(2*acos(Camera.W.4)))
}
if(qntusers == 1 )
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam) #put all together
if(qntusers == 2)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam) #put all together
if(qntusers == 3)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam) #put all together
if(qntusers == 4)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam,U4Trans,U4Rot,U4Scale,U4Cam) #put all together
tidyUsers <- head(tidyUsers,-1)
if(qntusers == 1){
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam) #total camera actions performed by all users;
}
if(qntusers == 2){
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam) #total camera actions performed by all users;
}
if(qntusers == 3){
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam) #total camera actions performed by all users;
}
if(qntusers == 4){
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans + U4Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale + U4Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot + U4Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam + U4Cam) #total camera actions performed by all users;
}
loadTotal <- loadTrans + loadRot + loadScale + loadCam
loadTrans <- head(loadTrans,-1) # remove the last row
loadScale <- head(loadScale,-1)
loadRot <- head(loadRot,-1)
loadCam <- head(loadCam,-1)
loadTotal <- head(loadTotal,-1)
if(qntusers == 1 | qntusers == 2 |qntusers == 3 | qntusers == 4){
U1Trans <- head(U1Trans,-1) # remove the last row
U1Rot <- head(U1Rot,-1)
U1Scale <- head(U1Scale,-1) # remove the last row
U1Cam <- head(U1Cam,-1) # remove the last row
U1totalTrans <- colSums(U1Trans != 0) / colSums(loadTrans != 0)
U1totalRot <- colSums(U1Rot != 0) / colSums(loadRot != 0)
U1totalScale <- colSums(U1Scale != 0) / colSums(loadScale != 0)
U1totalCam <- colSums(U1Cam != 0) / colSums(loadCam != 0)
allUsersTotalTrans <- U1totalTrans  #value >1 means parallel actions
allUsersTotalRot <- U1totalRot  #value >1 means parallel actions
allUsersTotalScale <- U1totalScale  #value >1 means parallel actions
allUsersTotalCam <- U1totalCam  #value >1 means parallel actions
}
if(qntusers == 2 |qntusers == 3 | qntusers == 4){
U2Trans <- head(U2Trans,-1)
U2Rot <- head(U2Rot,-1)
U2Scale <- head(U2Scale,-1)
U2Cam <- head(U2Cam,-1)
U2totalTrans <- colSums(U2Trans != 0) / colSums(loadTrans != 0)
U2totalRot <- colSums(U2Rot != 0) / colSums(loadRot != 0)
U2totalScale <- colSums(U2Scale != 0) / colSums(loadScale != 0)
U2totalCam <- colSums(U2Cam != 0) / colSums(loadCam != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans #value >1 means parallel actions
allUsersTotalRot <- U1totalRot + U2totalRot #value >1 means parallel actions
allUsersTotalScale <- U1totalScale + U2totalScale #value >1 means parallel actions
allUsersTotalCam <- U1totalCam + U2totalCam #value >1 means parallel actions
}
if(qntusers == 3 | qntusers == 4){
U3Trans <- head(U3Trans,-1)
U3Rot <- head(U3Rot,-1)
U3Scale <- head(U3Scale,-1)
U3Cam <- head(U3Cam,-1)
U3totalTrans <- colSums(U3Trans != 0) / colSums(loadTrans != 0)
U3totalRot <- colSums(U3Rot != 0) / colSums(loadRot != 0)
U3totalScale <- colSums(U3Scale != 0) / colSums(loadScale != 0)
U3totalCam <- colSums(U3Cam != 0) / colSums(loadCam != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans +U3totalTrans#value >1 means parallel actions
allUsersTotalRot <- U1totalRot + U2totalRot +U3totalRot#value >1 means parallel actions
allUsersTotalScale <- U1totalScale + U2totalScale +U3totalScale#value >1 means parallel actions
allUsersTotalCam <- U1totalCam + U2totalCam +U3totalCam #value >1 means parallel actions
}
if(qntusers == 4){
U4Trans <- head(U4Trans,-1)
U4Rot <- head(U4Rot,-1)
U4Scale <- head(U4Scale,-1)
U4Cam <- head(U4Cam,-1)
U4totalTrans <- colSums(U4Trans != 0) / colSums(loadTrans != 0)
U4totalRot <- colSums(U4Rot != 0) / colSums(loadRot != 0)
U4totalScale <- colSums(U4Scale != 0) / colSums(loadScale != 0)
U4totalCam <- colSums(U4Cam != 0) / colSums(loadCam != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans +U3totalTrans +U4totalTrans #value >1 means parallel actions
allUsersTotalRot <- U1totalRot + U2totalRot +U3totalRot +U4totalRot #value >1 means parallel actions
allUsersTotalScale <- U1totalScale + U2totalScale +U3totalScale +U4totalScale #value >1 means parallel actions
allUsersTotalCam <- U1totalCam + U2totalCam +U3totalCam +U4totalCam #value >1 means parallel actions
}
taskTotalLoad <- colSums(loadTotal != 0) / nrow(loadTotal) # task total load
taskTotalLoad <-as.data.frame(taskTotalLoad)
timeWorked <- colSums(loadTotal != 0) # get only the time worked
loadByTotalTime <- colSums(tidyUsers != 0) / nrow(tidyUsers) # load of each action of each users by total time
loadByWorkedTime <- colSums(tidyUsers != 0) / timeWorked # load of each action of each users only in the worked period
loadByWorkedTime <- as.data.frame.array(t(loadByWorkedTime))
loadByTotalTime <- as.data.frame.array(t(loadByTotalTime))
loadByTotalTime <- bind_cols(loadByTotalTime,taskTotalLoad)
if(qntusers == 1){
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
#loadPerUser1_task3 <- loadPerUser #if first
#loadByTotalTime1_task3 <- loadByTotalTime #if first
#loadByWorkedTime1_task3 <- loadByWorkedTime #if first
loadPerUser1_task3 <- bind_rows(loadPerUser1_task3,loadPerUser) # else add to the exiting
loadByTotalTime1_task3<- bind_rows(loadByTotalTime1_task3,loadByTotalTime) # else add to the exiting
loadByWorkedTime1_task3<- bind_rows(loadByWorkedTime1_task3,loadByWorkedTime) # else add to the exiting
}
if(qntusers == 2){
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
#loadPerUser2_task3 <- loadPerUser #if first
#loadByTotalTime2_task3 <- loadByTotalTime #if first
#loadByWorkedTime2_task3 <- loadByWorkedTime #if first
loadPerUser2_task3 <- bind_rows(loadPerUser2_task3,loadPerUser) # else add to the exiting
loadByTotalTime2_task3 <- bind_rows(loadByTotalTime2_task3,loadByTotalTime) # else add to the exiting
loadByWorkedTime2_task3 <- bind_rows(loadByWorkedTime2_task3,loadByWorkedTime) # else add to the exiting
}
if(qntusers == 3){
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
#loadPerUser3_task3 <- loadPerUser #if first
#loadByTotalTime3_task3 <- loadByTotalTime #if first
#loadByWorkedTime3_task3 <- loadByWorkedTime #if first
loadPerUser3_task3 <- bind_rows(loadPerUser3_task3,loadPerUser) # else add to the exiting
loadByTotalTime3_task3 <- bind_rows(loadByTotalTime3_task3,loadByTotalTime) # else add to the exiting
loadByWorkedTime3_task3 <- bind_rows(loadByWorkedTime3_task3,loadByWorkedTime) # else add to the exiting
}
if(qntusers == 4){
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,U4totalTrans,U4totalRot,U4totalScale,U4totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
#loadPerUser4_task3 <- loadPerUser #if first
#loadByTotalTime4_task3 <- loadByTotalTime #if first
#loadByWorkedTime4_task3 <- loadByWorkedTime #if first
loadPerUser4_task4 <- bind_rows(loadPerUser4_task4,loadPerUser) # else add to the exiting
loadByTotalTime4_task4 <- bind_rows(loadByTotalTime4_task4,loadByTotalTime) # else add to the exiting
loadByWorkedTime4_task4 <- bind_rows(loadByWorkedTime4_task4,loadByWorkedTime) # else add to the exiting
}
rm(U1Trans,U2Trans,U3Trans,U4Trans)
rm(U1Rot,U2Rot,U3Rot,U4Rot)
rm(U1Scale,U2Scale,U3Scale,U4Scale)
rm(U1Cam,U2Cam,U3Cam,U4Cam)
rm(U1totalTrans,U2totalTrans,U3totalTrans,U4totalTrans)
rm(U1totalRot,U2totalRot,U3totalRot,U4totalRot)
rm(U1totalScale,U2totalScale,U3totalScale,U4totalScale)
rm(U1totalCam,U2totalCam,U3totalCam,U4totalCam)
rm(loadTrans,loadRot,loadScale,loadCam,loadTotal)
rm(allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
rm(timeWorked,taskTotalLoad, loadByWorkedTime,loadByTotalTime)
rm(tidyUsers,users)
rm(loadPerUser)
View(loadByWorkedTime4_task4)
View(loadByWorkedTime4_task1)
View(loadByTotalTime4_task1)
View(loadByTotalTime3_task2)
View(loadByTotalTime4_task2)
View(loadByTotalTime4)
View(loadByTotalTime4_task4)
View(loadByWorkedTime4_task1)
View(loadByWorkedTime4_task2)
View(loadByWorkedTime4)
View(loadByWorkedTime4_task4)
View(loadPerUser4_task1)
View(loadPerUser4_task2)
View(loadPerUser4)
View(loadPerUser4_task4)
errorXGroups <- read.csv("ErrorXGroups.csv",header = FALSE)
setwd("~/GitHub/DataAnalysis3DController/Analysis/R")
setwd("~/GitHub/DataAnalysis3DController/Analysis/R")
errorXGroups <- read.csv("ErrorXGroups.csv",header = FALSE)
timeXGroups <- read.csv("TimeXGroups.csv", header = FALSE)
View(errorXGroups)
cor.test(errorXGroups)
cor.test(errorXGroups,x = 0)
cor.test(errorXGroups,x = 10,y=10)
library(Hmisc)
install.packages("library(Hmisc)")
install.packages(Hmisc")
a
asd
""
install.packages("Hmisc")
library(Hmisc)
rcorr(errorXGroups)
x <- errorXGroups[1]
y <- errorXGroups[2]
View(y)
rcorr(x,y)
rcorr(as.matrix(errorXGroups), type = "pearson")
cor(as.matrix(errorXGroups), type = "pearson")
cor(as.matrix(errorXGroups))
cor(as.matrix(errorXGroups),method = "pearson")
library(corrgram)
install.packages("corrgram")
library(corrgram)
corrgram(as.matrix(errorXGroups))
corrgram(as.matrix(timeXGroups))
corrgram(as.matrix(errorXGroups))
corrgram(as.matrix(timeXGroups))
corrgram(x,y)
corrgram(x)
corrgram([x:y])
corrgram(as.matrix(x),as.matrix(y))
corrgram(as.matrix(x)
)
taskTimeAndErrorPerTeam <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/taskTimeAndErrorPerTeam.csv", sep=";")
View(taskTimeAndErrorPerTeam)
x <- taskTimeAndErrorPerTeam[1:10]
x
x <- taskTimeAndErrorPerTeam[1,10]
x
x <- taskTimeAndErrorPerTeam[,c(1,10)]
x
y <- taskTimeAndErrorPerTeam[,c(1,11)]
y
cor(as.matrix(x))
corrgram(as.matrix(x)
)
corrgram(as.matrix(y))
rcorr(as.matrix(x))
rcorr(as.matrix(y))
old_taskTimeAndErrorPerTeam <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/old_taskTimeAndErrorPerTeam.csv", sep=";")
View(old_taskTimeAndErrorPerTeam)
xo <- old_taskTimeAndErrorPerTeam[,c(1,10)]
xo
yo <- old_taskTimeAndErrorPerTeam[,c(1,11)]
rcorr(as.matrix(x))
rcorr(as.matrix(xo))
rcorr(as.matrix(yo))
taskTimeAndErrorPerTeam <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/taskTimeAndErrorPerTeam.csv", sep=";")
View(taskTimeAndErrorPerTeam)
ave(taskTimeAndErrorPerTeam$Time.task.1,taskTimeAndErrorPerTeam$Time.task.2,taskTimeAndErrorPerTeam$Time.task.3,taskTimeAndErrorPerTeam$Time.task.4 )
rm(taskTimeAndErrorPerTeam)
source <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/taskTimeAndErrorPerTeam.csv", sep=";")
View(source)
newTaskTimeAndErrorPerTeam <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/newTaskTimeAndErrorPerTeam.csv", sep=";")
View(newTaskTimeAndErrorPerTeam)
ave(newTaskTimeAndErrorPerTeam$Time.task.1,newTaskTimeAndErrorPerTeam$Time.task.2,newTaskTimeAndErrorPerTeam$Time.task.3,newTaskTimeAndErrorPerTeam$Time.task.4 )
ave(newTaskTimeAndErrorPerTeam)
ave(newTaskTimeAndErrorPerTeam$Members.Task)
ave(newTaskTimeAndErrorPerTeam$Members.Task,newTaskTimeAndErrorPerTeam$Time.task.1)
rowMeans(subset(newTaskTimeAndErrorPerTeam, select = c(2, 3,4,5)), na.rm = TRUE)
newTaskTimeAndErrorPerTeam$MeanTime <- rowMeans(subset(newTaskTimeAndErrorPerTeam, select = c(2, 3,4,5)), na.rm = TRUE)
newTaskTimeAndErrorPerTeam$MeanError <- rowMeans(subset(newTaskTimeAndErrorPerTeam, select = c(6, 7,8,9)), na.rm = TRUE)
library(dplyr)
library(psych)
install.packages("psych")
library(dplyr)
library(psych)
describe(newTaskTimeAndErrorPerTeam)
sourceData <- read.csv("newTaskTimeAndErrorPerTeam.csv",header = TRUE)
View(sourceData)
sourceData <- read.csv("newTaskTimeAndErrorPerTeam.csv",header = TRUE,  sep=";")
boxplot(sourceData[2:5],xlab="Team members",ylab="Time",main="Time X Groups")
boxplot(sourceData[6:9],xlab="Team members",ylab="Time",main="Time X Groups")
boxplot(sourceData[2:5],xlab="Team members",ylab="Time",main="Time X Groups")
boxplot(sourceData[6:9],xlab="Team members",ylab="Time",main="Time X Groups")
library(tidyr)
errorTimeAndVarPerTeam <- read.csv2("~/GitHub/DataAnalysis3DController/Analysis/R/errorTimeAndVarPerTeam.csv")
View(errorTimeAndVarPerTeam)
errorAndTimePerTask <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/errorAndTimePerTask.csv", sep=";")
View(errorAndTimePerTask)
gather(errorTimeAndVarPerTeam, "error", "group", 5:8)
gather(errorTimeAndVarPerTeam, "error", "group", 5:8)
gather(errorTimeAndVarPerTeam, "error", "group", 5:8,na.rm = TRUE)
gather(errorTimeAndVarPerTeam, "error", "group", 5:8,na.rm = FALSE)
temp <- gather(errorTimeAndVarPerTeam, "error", "group", 5:8)
temp
toDunn <- temp[9:10]
toDunn
library(dunn.test)
dunn.test(as.matrix(toDunn), kw=FALSE, method="bonferroni")
dunn.test(toDunn$error,toDunn$group, kw=FALSE, method="bonferroni")
dunn.test(toDunn$error,toDunn$group, kw=FALSE, method="bonferroni",g = toDunn$group)
dunn.test(toDunn$error, kw=FALSE, method="bonferroni",g = toDunn$group)
is(toDunn)
toDunn
dunn.test(toDunn$group, kw=FALSE, method="bonferroni",g = toDunn$error)
dunn.test(toDunn$group, kw=FALSE,g = toDunn$error)
dunn.test(toDunn$group,toDunn$error kw=FALSE, method="bonferroni" )
dunn.test(toDunn$group,toDunn$error, kw=FALSE, method="bonferroni" )
temp <- gather(errorTimeAndVarPerTeam, "group", "error", 5:8)
temp
toDunn <- temp[9:10]
toDunn
dunn.test(toDunn$error,toDunn$group, kw=FALSE, method="bonferroni" )
temp2 <- gather(errorTimeAndVarPerTeam, "group", "time", 1:4)
toDunn2 <- temp2[9:10]
toDunn2
dunn.test(toDunn$time,toDunn$group, kw=FALSE, method="bonferroni" )
dunn.test(toDunn2$time,toDunn2$group, kw=FALSE, method="bonferroni" )
dunn.test(toDunn2$time,toDunn2$group, kw=TRUE, method="bonferroni" )
dunn.test(toDunn$error,toDunn$group, kw=TRUE, method="bonferroni" )
temp2 <- gather(errorTimeAndVarPerTeam[1:4], "group", "time", 1:4)
temp2
describe(dAvgTime)
library(psych)
describe(dAvgTime)
describe(errorAndTimePerTask)
describe(errorAndTimePerTask[1:4])
boxplot(errorAndTimePerTask,xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(errorAndTimePerTask[2:4],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(errorAndTimePerTask[2:5],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(errorAndTimePerTask[6:9],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
lapply(errorAndTimePerTask[2:4], shapiro.test)
lapply(errorTimeAndVarPerTeam[1:8], shapiro.test)
temp <- lapply(errorTimeAndVarPerTeam[1:8], shapiro.test)
sapply(temp, `[`, c("statistic","p.value"))
sapply(lapply(errorTimeAndVarPerTeam[1:8], shapiro.test), `[`, c("statistic","p.value"))
sapply(lapply(errorTimeAndVarPerTeam[1:8], shapiro.test, `[`, c("statistic","p.value"))
)
sapply(lapply(errorTimeAndVarPerTeam[1:8], shapiro.test), `[`, c("statistic","p.value"))
savehistory("~/GitHub/DataAnalysis3DController/Analysis/R/.Rhistory")
save.image("~/GitHub/DataAnalysis3DController/Analysis/R/.RData")
