timeXGroups <- read.csv("TimeXGroups.csv", header = FALSE)
View(errorXGroups)
cor.test(errorXGroups)
cor.test(errorXGroups,x = 0)
cor.test(errorXGroups,x = 10,y=10)
library(Hmisc)
install.packages("library(Hmisc)")
install.packages(Hmisc")
a
asd
""
install.packages("Hmisc")
library(Hmisc)
rcorr(errorXGroups)
x <- errorXGroups[1]
y <- errorXGroups[2]
View(y)
rcorr(x,y)
rcorr(as.matrix(errorXGroups), type = "pearson")
cor(as.matrix(errorXGroups), type = "pearson")
cor(as.matrix(errorXGroups))
cor(as.matrix(errorXGroups),method = "pearson")
library(corrgram)
install.packages("corrgram")
library(corrgram)
corrgram(as.matrix(errorXGroups))
corrgram(as.matrix(timeXGroups))
corrgram(as.matrix(errorXGroups))
corrgram(as.matrix(timeXGroups))
corrgram(x,y)
corrgram(x)
corrgram([x:y])
corrgram(as.matrix(x),as.matrix(y))
corrgram(as.matrix(x)
)
taskTimeAndErrorPerTeam <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/taskTimeAndErrorPerTeam.csv", sep=";")
View(taskTimeAndErrorPerTeam)
x <- taskTimeAndErrorPerTeam[1:10]
x
x <- taskTimeAndErrorPerTeam[1,10]
x
x <- taskTimeAndErrorPerTeam[,c(1,10)]
x
y <- taskTimeAndErrorPerTeam[,c(1,11)]
y
cor(as.matrix(x))
corrgram(as.matrix(x)
)
corrgram(as.matrix(y))
rcorr(as.matrix(x))
rcorr(as.matrix(y))
old_taskTimeAndErrorPerTeam <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/old_taskTimeAndErrorPerTeam.csv", sep=";")
View(old_taskTimeAndErrorPerTeam)
xo <- old_taskTimeAndErrorPerTeam[,c(1,10)]
xo
yo <- old_taskTimeAndErrorPerTeam[,c(1,11)]
rcorr(as.matrix(x))
rcorr(as.matrix(xo))
rcorr(as.matrix(yo))
taskTimeAndErrorPerTeam <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/taskTimeAndErrorPerTeam.csv", sep=";")
View(taskTimeAndErrorPerTeam)
ave(taskTimeAndErrorPerTeam$Time.task.1,taskTimeAndErrorPerTeam$Time.task.2,taskTimeAndErrorPerTeam$Time.task.3,taskTimeAndErrorPerTeam$Time.task.4 )
rm(taskTimeAndErrorPerTeam)
source <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/taskTimeAndErrorPerTeam.csv", sep=";")
View(source)
newTaskTimeAndErrorPerTeam <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/newTaskTimeAndErrorPerTeam.csv", sep=";")
View(newTaskTimeAndErrorPerTeam)
ave(newTaskTimeAndErrorPerTeam$Time.task.1,newTaskTimeAndErrorPerTeam$Time.task.2,newTaskTimeAndErrorPerTeam$Time.task.3,newTaskTimeAndErrorPerTeam$Time.task.4 )
ave(newTaskTimeAndErrorPerTeam)
ave(newTaskTimeAndErrorPerTeam$Members.Task)
ave(newTaskTimeAndErrorPerTeam$Members.Task,newTaskTimeAndErrorPerTeam$Time.task.1)
rowMeans(subset(newTaskTimeAndErrorPerTeam, select = c(2, 3,4,5)), na.rm = TRUE)
newTaskTimeAndErrorPerTeam$MeanTime <- rowMeans(subset(newTaskTimeAndErrorPerTeam, select = c(2, 3,4,5)), na.rm = TRUE)
newTaskTimeAndErrorPerTeam$MeanError <- rowMeans(subset(newTaskTimeAndErrorPerTeam, select = c(6, 7,8,9)), na.rm = TRUE)
library(dplyr)
library(psych)
install.packages("psych")
library(dplyr)
library(psych)
describe(newTaskTimeAndErrorPerTeam)
sourceData <- read.csv("newTaskTimeAndErrorPerTeam.csv",header = TRUE)
View(sourceData)
sourceData <- read.csv("newTaskTimeAndErrorPerTeam.csv",header = TRUE,  sep=";")
boxplot(sourceData[2:5],xlab="Team members",ylab="Time",main="Time X Groups")
boxplot(sourceData[6:9],xlab="Team members",ylab="Time",main="Time X Groups")
boxplot(sourceData[2:5],xlab="Team members",ylab="Time",main="Time X Groups")
boxplot(sourceData[6:9],xlab="Team members",ylab="Time",main="Time X Groups")
library(tidyr)
errorTimeAndVarPerTeam <- read.csv2("~/GitHub/DataAnalysis3DController/Analysis/R/errorTimeAndVarPerTeam.csv")
View(errorTimeAndVarPerTeam)
errorAndTimePerTask <- read.csv("~/GitHub/DataAnalysis3DController/Analysis/R/errorAndTimePerTask.csv", sep=";")
View(errorAndTimePerTask)
gather(errorTimeAndVarPerTeam, "error", "group", 5:8)
gather(errorTimeAndVarPerTeam, "error", "group", 5:8)
gather(errorTimeAndVarPerTeam, "error", "group", 5:8,na.rm = TRUE)
gather(errorTimeAndVarPerTeam, "error", "group", 5:8,na.rm = FALSE)
temp <- gather(errorTimeAndVarPerTeam, "error", "group", 5:8)
temp
toDunn <- temp[9:10]
toDunn
library(dunn.test)
dunn.test(as.matrix(toDunn), kw=FALSE, method="bonferroni")
dunn.test(toDunn$error,toDunn$group, kw=FALSE, method="bonferroni")
dunn.test(toDunn$error,toDunn$group, kw=FALSE, method="bonferroni",g = toDunn$group)
dunn.test(toDunn$error, kw=FALSE, method="bonferroni",g = toDunn$group)
is(toDunn)
toDunn
dunn.test(toDunn$group, kw=FALSE, method="bonferroni",g = toDunn$error)
dunn.test(toDunn$group, kw=FALSE,g = toDunn$error)
dunn.test(toDunn$group,toDunn$error kw=FALSE, method="bonferroni" )
dunn.test(toDunn$group,toDunn$error, kw=FALSE, method="bonferroni" )
temp <- gather(errorTimeAndVarPerTeam, "group", "error", 5:8)
temp
toDunn <- temp[9:10]
toDunn
dunn.test(toDunn$error,toDunn$group, kw=FALSE, method="bonferroni" )
temp2 <- gather(errorTimeAndVarPerTeam, "group", "time", 1:4)
toDunn2 <- temp2[9:10]
toDunn2
dunn.test(toDunn$time,toDunn$group, kw=FALSE, method="bonferroni" )
dunn.test(toDunn2$time,toDunn2$group, kw=FALSE, method="bonferroni" )
dunn.test(toDunn2$time,toDunn2$group, kw=TRUE, method="bonferroni" )
dunn.test(toDunn$error,toDunn$group, kw=TRUE, method="bonferroni" )
temp2 <- gather(errorTimeAndVarPerTeam[1:4], "group", "time", 1:4)
temp2
describe(dAvgTime)
library(psych)
describe(dAvgTime)
describe(errorAndTimePerTask)
describe(errorAndTimePerTask[1:4])
boxplot(errorAndTimePerTask,xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(errorAndTimePerTask[2:4],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(errorAndTimePerTask[2:5],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(errorAndTimePerTask[6:9],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
lapply(errorAndTimePerTask[2:4], shapiro.test)
lapply(errorTimeAndVarPerTeam[1:8], shapiro.test)
temp <- lapply(errorTimeAndVarPerTeam[1:8], shapiro.test)
sapply(temp, `[`, c("statistic","p.value"))
sapply(lapply(errorTimeAndVarPerTeam[1:8], shapiro.test), `[`, c("statistic","p.value"))
sapply(lapply(errorTimeAndVarPerTeam[1:8], shapiro.test, `[`, c("statistic","p.value"))
)
sapply(lapply(errorTimeAndVarPerTeam[1:8], shapiro.test), `[`, c("statistic","p.value"))
savehistory("~/GitHub/DataAnalysis3DController/Analysis/R/.Rhistory")
save.image("~/GitHub/DataAnalysis3DController/Analysis/R/.RData")
library(dplyr)
library(psych)
library(corrgram)
library(Hmisc)
install.packages("corrgram")
sourceDataGroups <- read.csv("errorTimeAndVarPerTeam.csv",header = TRUE,  sep=";")
sourceDataGroups
sourceDataTasks <- read.csv("errorAndTimePerTask.csv",header = TRUE,  sep=";")
sourceDataTasks
#errorXGroups <- read.csv("ErrorXGroups.csv",header = FALSE)
#errorXGroups
#timeXGroups <- read.csv("TimeXGroups.csv", header = FALSE)
#timeXGroups
#describe(errorXGroups)
#describe(timeXGroups)
describe(sourceDataGroups)
boxplot(sourceDataGroups[1:4],xlab="Team members",ylab="Time",main="Time X Groups")
boxplot(sourceDataGroups[5:8],xlab="Team members",ylab="Error",main="Error X Groups")
#boxplot(timeXGroups,xlab="Team members",ylab="Time",main="Time X Groups")
#boxplot(errorXGroups,xlab="Team members",ylab="Error",main="Error X Groups")
sourceDataGroups
sourceDataGroups[1:4]
boxplot(sourceDataGroups[1:4],xlab="Team members",ylab="Time",main="Time X Groups")
boxplot(sourceDataGroups[5:8],xlab="Team members",ylab="Error",main="Error X Groups")
boxplot(sourceDataTasks[2:5],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(sourceDataTasks[2:5],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
#boxplot(sourceDataGroups[1:4],xlab="Team members",ylab="Time",main="Time X Groups")
#boxplot(sourceDataGroups[5:8],xlab="Team members",ylab="Error",main="Error X Groups")
#boxplot(timeXGroups,xlab="Team members",ylab="Time",main="Time X Groups")
#boxplot(errorXGroups,xlab="Team members",ylab="Error",main="Error X Groups")
boxplot(sourceDataTasks[2:5],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(sourceDataGroups[1:4],xlab="Team members",ylab="Time",main="Time X Groups")
#boxplot(sourceDataGroups[5:8],xlab="Team members",ylab="Error",main="Error X Groups")
#boxplot(timeXGroups,xlab="Team members",ylab="Time",main="Time X Groups")
#boxplot(errorXGroups,xlab="Team members",ylab="Error",main="Error X Groups")
sourceDataTasks$MeanTime <- rowMeans(subset(sourceDataTasks, select = c(2,3,4,5)), na.rm = TRUE)
sourceDataTasks$MeanError <- rowMeans(subset(sourceDataTasks, select = c(6,7,8,9)), na.rm = TRUE)
teamTimeCorr <- sourceDataTasks[,c(1,10)]
teamTimeCorr <- rcorr(as.matrix(teamTimeCorr))
teamTimeCorr
teamErrorCorr <- sourceDataTasks[,c(1,11)]
teamErrorCorr <- rcorr(as.matrix(teamErrorCorr))
teamErrorCorr
sapply(lapply(sourceDataGroups[1:8], shapiro.test), `[`, c("statistic","p.value"))
sapply(lapply(sourceDataGroups[1:8], shapiro.test), `[`, c("statistic","p.value"))
library(dunn.test)
timeToDunn <- gather(sourceDataGroups[1:4], "group", "errors", 1:4)
dunn.test(toDunn$error,toDunn$group, kw=TRUE, method="bonferroni")
install.packages("dunn.test")
teamTimeCorr <- sourceDataTasks[,c(1,10)]
teamTimeCorr <- rcorr(as.matrix(teamTimeCorr))
teamTimeCorr
sapply(lapply(sourceDataGroups[1:8], shapiro.test), `[`, c("statistic","p.value"))
lapply(sourceDataGroups[1:8], shapiro.test)
sourceDataGroups[1:8]
sapply(lapply(errorTimeAndVarPerTeam[1:8], shapiro.test), `[`, c("statistic","p.value"))
View(errorTimeAndVarPerTeam)
View(sourceDataTasks)
View(sourceDataGroups)
View(sourceDataGroups)
View(errorTimeAndVarPerTeam)
View(errorAndTimePerTask)
sapply(lapply(sourceDataGroups[1:8], shapiro.test), `[`, c("statistic","p.value"))
View(errorTimeAndVarPerTeam)
View(sourceDataGroups)
View(sourceDataTasks)
View(sourceDataGroups)
sourceDataGroups <- read.csv("errorTimeAndVarPerTeam.csv",header = TRUE,  sep=";")
sourceDataGroups <- read.csv("errorTimeAndVarPerTeam.csv",header = TRUE,  sep=";",dec = ",")
sapply(lapply(sourceDataGroups[1:8], shapiro.test), `[`, c("statistic","p.value"))
boxplot(sourceDataGroups[1:4],xlab="Team members",ylab="Time",main="Time X Groups")
#boxplot(sourceDataGroups[5:8],xlab="Team members",ylab="Error",main="Error X Groups")
#boxplot(timeXGroups,xlab="Team members",ylab="Time",main="Time X Groups")
#boxplot(errorXGroups,xlab="Team members",ylab="Error",main="Error X Groups")
boxplot(sourceDataGroups[1:4],xlab="Team members",ylab="Time",main="Time X Groups")
boxplot(sourceDataGroups[5:8],xlab="Team members",ylab="Error",main="Error X Groups")
#boxplot(timeXGroups,xlab="Team members",ylab="Time",main="Time X Groups")
#boxplot(errorXGroups,xlab="Team members",ylab="Error",main="Error X Groups")
sourceDataTasks$MeanTime <- rowMeans(subset(sourceDataTasks, select = c(2,3,4,5)), na.rm = TRUE)
sourceDataTasks$MeanError <- rowMeans(subset(sourceDataTasks, select = c(6,7,8,9)), na.rm = TRUE)
teamTimeCorr <- sourceDataTasks[,c(1,10)]
teamTimeCorr <- rcorr(as.matrix(teamTimeCorr))
teamTimeCorr
teamErrorCorr <- sourceDataTasks[,c(1,11)]
teamErrorCorr <- rcorr(as.matrix(teamErrorCorr))
teamErrorCorr
sapply(lapply(sourceDataGroups[1:8], shapiro.test), `[`, c("statistic","p.value"))
library(dunn.test)
timeToDunn <- gather(sourceDataGroups[1:4], "group", "errors", 1:4)
dunn.test(toDunn$error,toDunn$group, kw=TRUE, method="bonferroni")
errorToDunn <- gather(sourceDataGroups[5:8], "group", "errors", 5:8)
dunn.test(toDunn$error,toDunn$group, kw=TRUE, method="bonferroni")
describe(sourceDataTasks[2:5])
describe(sourceDataTasks[6:9])
```
### Plots
Time of task completion vs. Task for all combinations of teams:
The code used to generate the charts is:
```{r boxplot}
boxplot(sourceDataTasks[2:5],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(sourceDataTasks[6:9],xlab="Tasks",ylab="Error",main="Error perfored in the tasks")
errorToDunn <- gather(sourceDataGroups[5:8], "group", "errors", 5:8)
dunn.test(toDunn$error,toDunn$group, kw=TRUE, method="bonferroni")
describe(sourceDataTasks[2:5])
describe(sourceDataTasks[6:9])
```
### Plots
Time of task completion vs. Task for all combinations of teams:
The code used to generate the charts is:
```{r boxplot}
boxplot(sourceDataTasks[2:5],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(sourceDataTasks[6:9],xlab="Tasks",ylab="Error",main="Error perfored in the tasks")
describe(sourceDataTasks[2:5])
describe(sourceDataTasks[6:9])
boxplot(sourceDataTasks[2:5],xlab="Tasks",ylab="Time",main="Time to complete the tasks")
boxplot(sourceDataTasks[6:9],xlab="Tasks",ylab="Error",main="Error perfored in the tasks")
sourceDataTasks$MeanTime <- rowMeans(subset(sourceDataTasks, select = c(2,3,4,5)), na.rm = TRUE)
sourceDataTasks$MeanError <- rowMeans(subset(sourceDataTasks, select = c(6,7,8,9)), na.rm = TRUE)
rowMeans(subset(sourceDataTasks, select = c(2,3,4,5)), na.rm = TRUE)
rowMeans(subset(sourceDataTasks, select = c(6,7,8,9)), na.rm = TRUE)
library(dunn.test)
timeToDunn <- gather(sourceDataGroups[1:4], "group", "errors", 1:4)
dunn.test(toDunn$error,toDunn$group, kw=TRUE, method="bonferroni")
errorToDunn <- gather(sourceDataGroups[5:8], "group", "errors", 5:8)
dunn.test(toDunn$error,toDunn$group, kw=TRUE, method="bonferroni")
gather(sourceDataGroups[5:8], "group", "errors", 5:8)
library(tidyr)
gather(sourceDataGroups[5:8], "group", "errors", 5:8)
sourceDataGroups[5:8]
gather(sourceDataGroups, "group", "errors", 5:8)
gather(sourceDataGroups[5:8], "group", "errors", 5:8)
gather(sourceDataGroups[1], "group", "errors", 5:8)
gather(sourceDataGroups, "group", "errors", 5:8)
timeToDunn <- gather(sourceDataGroups, "group", "errors", 1:4)
dunn.test(timeToDunn$error,timeToDunn$group, kw=TRUE, method="bonferroni")
sapply(lapply(errorAndTimePerTask[1:8], shapiro.test), `[`, c("statistic","p.value"))
View(X1.2.Task1.2016.06.03.15.17.54)
tidyUsers <- head(tidyUsers,-1)
qntusers <- 4
if(qntusers == 1)
users <- select(X23.1.Task1.2016.06.10.18.32.14,ends_with(".1"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
if(qntusers == 2)
users <- select(X6.2.Task3.2016.06.07.10.18.40,ends_with(".1"),ends_with(".2"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
if(qntusers == 3)
users <- select(X18.3.Task1.2016.06.09.10.19.23,ends_with(".1"),ends_with(".2"), ends_with(".3"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
if(qntusers == 4)
users <- select(X25.4.Task4.2016.06.17.14.31.44,ends_with(".1"),ends_with(".2"), ends_with(".3"),ends_with(".4"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
users[users>0.999999] <- 1 # remove the noise in the data
rad2deg <- function(rad) {(rad * 180) / (pi)}
U1Trans <- transmute(users, U1Trans = sqrt((Translation.X.1 * Translation.X.1) + (Translation.Y.1 * Translation.Y.1) + (Translation.Z.1 * Translation.Z.1))) #translation magnitude
U1Rot <- transmute(users, U1Rot = rad2deg(2*acos(Rotation.W.1))) #angle of rotation
U1Scale <- transmute(users, U1Scale = abs(Scalling.1-1)) #scale in absolute values
U1Cam <- transmute(users, U1Cam = rad2deg(2*acos(Camera.W.1)))#angle of cam rotation
if(qntusers == 2 |qntusers == 3 | qntusers == 4){
U2Trans <- transmute(users, U2Trans = sqrt((Translation.X.2 * Translation.X.2) + (Translation.Y.2 * Translation.Y.2) + (Translation.Z.2 * Translation.Z.2)))
U2Rot <- transmute(users, U2Rot = rad2deg(2*acos(Rotation.W.2)))
U2Scale <- transmute(users, U2Scale = abs(Scalling.2-1))
U2Cam <- transmute(users, U2Cam = rad2deg(2*acos(Camera.W.2)))
}
if(qntusers == 3 | qntusers == 4){
U3Trans <- transmute(users, U3Trans = sqrt((Translation.X.3 * Translation.X.3) + (Translation.Y.3 * Translation.Y.3) + (Translation.Z.3 * Translation.Z.3)))
U3Rot <- transmute(users, U3Rot = rad2deg(2*acos(Rotation.W.3)))
U3Scale <- transmute(users, U3Scale = abs(Scalling.3-1))
U3Cam <- transmute(users, U3Cam = rad2deg(2*acos(Camera.W.3)))
}
if(qntusers == 4){
U4Trans <- transmute(users, U4Trans = sqrt((Translation.X.4 * Translation.X.4) + (Translation.Y.4 * Translation.Y.4) + (Translation.Z.4 * Translation.Z.4)))
U4Rot <- transmute(users, U4Rot = rad2deg(2*acos(Rotation.W.4)))
U4Scale <- transmute(users, U4Scale = abs(Scalling.4-1))
U4Cam <- transmute(users, U4Cam = rad2deg(2*acos(Camera.W.4)))
}
if(qntusers == 1 )
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam) #put all together
if(qntusers == 2)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam) #put all together
if(qntusers == 3)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam) #put all together
if(qntusers == 4)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam,U4Trans,U4Rot,U4Scale,U4Cam) #put all together
tidyUsers <- head(tidyUsers,-1)
View(tidyUsers)
gather(tidyUsers,"action","value",1:16)
if(tidyUsers$U1Trans == 0){}
if(tidyUsers$U1Trans == 0){1}else{0}
if(tidyUsers$U1Trans == 0)
asd
if(tidyUsers$U1Trans = 0)
if(tidyUsers$U1Trans == 10)
1
if(tidyUsers[1] == 10)
1
tidyUsers
as.numeric(tidyUsers$U1Trans > 7)
as.numeric(tidyUsers$U1Trans > 10)
asd <- as.numeric(tidyUsers$U1Trans > 10)
asd
asd <- as.numeric(tidyUsers$U1Trans > 0)
asd
lapply(tidyUsers$U1Trans, function(x) ifelse(x >0, 1, 0))
asd <- lapply(tidyUsers$U1Trans, function(x) ifelse(x >0, 1, 0))
tidyUsers$U1TransAsd<- lapply(tidyUsers$U1Trans, function(x) ifelse(x >0, 1, 0))
View(loadByTotalTime4_task4)
View(tidyUsers)
tidyUsers$U1RotAsd<- lapply(tidyUsers$U1Rot, function(x) ifelse(x >0, 2, 0))
tidyUsers$U1ScaleAsd<- lapply(tidyUsers$U1Scale, function(x) ifelse(x >0, 3, 0))
View(tidyUsers)
tidyUsers$U1CamAsd<- lapply(tidyUsers$U1Cam, function(x) ifelse(x >0, 4, 0))
View(tidyUsers)
tidyUsers$U1CamAsd<- lapply(tidyUsers, function(x) ifelse(x$U1TransAsd >0, 4, 0))
mtcars
unite_(mtcars, "vs_am", c("vs","am"))
apply(mm,1, function(x) head(x[x!=0],1))
asd <- tidyUsers[17:20]
asd
apply(asd,1, function(x) head(x[x!=0],1))
asd2 <-apply(asd,1, function(x) head(x[x!=0],1))
asd2
asd2 <-apply(asd,1, function(x) ))
head(x[x!=0],1
)
head(asd2[asd2!=0],1)
head(asd2[asd2!=0],1,0)
asd2 <-apply(asd, function(x) head(x[x!=0],1))
asd2 <-apply(asd, 1, function(x) head(x[x!=0],1))
desired.result <- asd[asd2, ]
desired.result <- asd[asd2 ]
desired.result <- asd[,asd2 ]
desired.result <- data.frame(asd2)
data.frame(asd2)
asd2
asd2 <- apply(asd, 1, function(x) any(x) && x[as.logical(x)][1] == 1)
asd2
desired.result <- asd[asd2,]
View(desired.result)
asd2 <- apply(asd, 1, function(x) any(x) && x[as.logical(x)][1] > 0)
desired.result <- asd[asd2,]
asd2 <- apply(asd, 1, function(x) any(x) && as.logica(x)[1] > 0)
asd2 <- apply(asd, 1, function(x) any(x) && as.logical(x)[1] > 0)
desired.result <- asd[asd2,]
asd2 <- apply(asd, 1, function(x) any(x) && x[as.logical(x)][1] > 0)
desired.result <- asd[asd2,]
desired.result <- asd[asd2,]
setdiff(desired.result$U1TransAsd, desired.result$U1RotAsd)
setdiff(desired.result$U1TransAsd, desired.result$U1RotAsd,desired.result$U1ScaleAsd,desired.result$U1CamAsd)
setdiff(desired.result$U1ScaleAsd, desired.result$U1RotAsd)
asd2 <- apply(asd, 1, function(x) any(x) && function(x) x[x != 0][1] == 1)
asd2 <- apply(asd, 1,function(x) x[x != 0][1] == 1)
View(desired.result)
mutate(desired.result,SUM = U1TransAsd + U1RotAsd )
mutate(desired.result,aaa = U1TransAsd + U1RotAsd )
aaa <_ mutate(desired.result,aaa = U1TransAsd + U1RotAsd )
aaa <- mutate(desired.result,aaa = U1TransAsd + U1RotAsd )
aaa <- mutate(desired.result,aaa = U1TransAsd+U1RotAsd )
aaa <- mutate(desired.result,aaa=U1TransAsd+U1RotAsd )
library(dplyr)
aaa <- mutate(desired.result,aaa=U1TransAsd+U1RotAsd )
desired.result
View(desired.result)
aaa <- mutate(desired.result,aaa=U1TransAsd )
asd
View(aaa)
aaa <- mutate(desired.result,aaa=U1TransAsd + U1ScaleAsd)
aaa <- mutate(desired.result,aaa=U1TransAsd + U1CamAsd)
aaa <- mutate(desired.result,aaa=any(desired.result))
is.numeric(desired.result)
is.numeric(desired.result$U1RotAsd)
is.numeric(desired.result$U1TransAsd)
is.numeric(desired.result$U1TransAsd)
sapply(desired.result, mode)
sapply(desired.result$U1TransAsd, mode)
is.numeric(desired.result$U1RotAsd)
is.list(desired.result$U1RotAsd)
transform(desired.result, U1TransAsd = as.numeric(U1TransAsd))
is.numeric(desired.result$U1TransAsd)
aaa <- mutate(desired.result,aaa=U1TransAsd + U1CamAsd)
aaa <- mutate(desired.result,aaa=desired.result$U1TransAsd + desired.result$U1CamAsd)
aaa <- desired.result$U1TransAsd + desired.result$U1CamAsd
is.numeric(desired.result$U1TransAsd)
is.numeric(U1Trans)
aaa <- transmute(desired.result, U2Cam = rad2deg(2*acos(Camera.W.2)))
aaa <- transmute(desired.result, U2Cam = rad2deg(2*acos(U1RotAsd)))
aaa <- transmute(desired.result, U2Cam = rad2deg(2*acos(U1RotAsd)))
View(users)
aaa <- transmute(users, U2Cam = rad2deg(2*acos(Camera.W.2)))
aaa <- transmute(users, U2Cam = Translation.X.1 + Translation.Y.1)
asd
View(aaa)
transform(desired.result)
aaa <- transmute(desired.result, U2Cam = as.numeric(U1RotAsd)+ as.numeric(U1TransAsd))
aaa
mutate(desired.result, SUM = as.numeric(U1RotAsd)+ as.numeric(U1TransAsd)+ as.numeric(U1ScaleAsd)+ as.numeric(U1CamAsd))
View(desired.result)
aaa <- mutate(desired.result, SUM = as.numeric(U1RotAsd)+ as.numeric(U1TransAsd)+ as.numeric(U1ScaleAsd)+ as.numeric(U1CamAsd))
View(aaa)
View(aaa$SUM)
View(aaa)
View(aaa[5])
write(t(aaa[5])
)
write(t(aaa[5]))
write.csv(t(aaa[5]),file = "aaa.csv")
asd2 <-apply(asd, function(x) head(x[x!=0],1))
asd2 <- apply(asd, 1, function(x) any(x) && x[as.logical(x)][1] == 1)
asd2
desired.result <- asd[asd2,]
mutate(desired.result, SUM = as.numeric(U1RotAsd)+ as.numeric(U1TransAsd)+ as.numeric(U1ScaleAsd)+ as.numeric(U1CamAsd))
aaa <- mutate(desired.result, SUM = as.numeric(U1RotAsd)+ as.numeric(U1TransAsd)+ as.numeric(U1ScaleAsd)+ as.numeric(U1CamAsd))
View(aaa)
asd2 <- apply(asd, 1, function(x) any(x) && x[as.logical(x)][1] == 1)
asd2
desired.result <- asd[asd2,]
desired.result
aaa <- mutate(desired.result, SUM = as.numeric(U1RotAsd)+ as.numeric(U1TransAsd)+ as.numeric(U1ScaleAsd)+ as.numeric(U1CamAsd))
aaa
asd2 <- apply(asd, 1, function(x) any(x) && x[as.logical(x)][1] >0)
asd2
desired.result <- asd[asd2,]
mutate(desired.result, SUM = as.numeric(U1RotAsd)+ as.numeric(U1TransAsd)+ as.numeric(U1ScaleAsd)+ as.numeric(U1CamAsd))
aaa <- mutate(desired.result, SUM = as.numeric(U1RotAsd)+ as.numeric(U1TransAsd)+ as.numeric(U1ScaleAsd)+ as.numeric(U1CamAsd))
aaa
View(tidyUsers)
if(qntusers == 4)
users <- select(X25.4.Task4.2016.06.17.14.31.44,ends_with(".1"),ends_with(".2"), ends_with(".3"),ends_with(".4"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
users[users>0.999999] <- 1 # remove the noise in the data
rad2deg <- function(rad) {(rad * 180) / (pi)}
U1Trans <- transmute(users, U1Trans = sqrt((Translation.X.1 * Translation.X.1) + (Translation.Y.1 * Translation.Y.1) + (Translation.Z.1 * Translation.Z.1))) #translation magnitude
U1Rot <- transmute(users, U1Rot = rad2deg(2*acos(Rotation.W.1))) #angle of rotation
U1Scale <- transmute(users, U1Scale = abs(Scalling.1-1)) #scale in absolute values
U1Cam <- transmute(users, U1Cam = rad2deg(2*acos(Camera.W.1)))#angle of cam rotation
if(qntusers == 2 |qntusers == 3 | qntusers == 4){
U2Trans <- transmute(users, U2Trans = sqrt((Translation.X.2 * Translation.X.2) + (Translation.Y.2 * Translation.Y.2) + (Translation.Z.2 * Translation.Z.2)))
U2Rot <- transmute(users, U2Rot = rad2deg(2*acos(Rotation.W.2)))
U2Scale <- transmute(users, U2Scale = abs(Scalling.2-1))
U2Cam <- transmute(users, U2Cam = rad2deg(2*acos(Camera.W.2)))
}
if(qntusers == 3 | qntusers == 4){
U3Trans <- transmute(users, U3Trans = sqrt((Translation.X.3 * Translation.X.3) + (Translation.Y.3 * Translation.Y.3) + (Translation.Z.3 * Translation.Z.3)))
U3Rot <- transmute(users, U3Rot = rad2deg(2*acos(Rotation.W.3)))
U3Scale <- transmute(users, U3Scale = abs(Scalling.3-1))
U3Cam <- transmute(users, U3Cam = rad2deg(2*acos(Camera.W.3)))
}
if(qntusers == 4){
U4Trans <- transmute(users, U4Trans = sqrt((Translation.X.4 * Translation.X.4) + (Translation.Y.4 * Translation.Y.4) + (Translation.Z.4 * Translation.Z.4)))
U4Rot <- transmute(users, U4Rot = rad2deg(2*acos(Rotation.W.4)))
U4Scale <- transmute(users, U4Scale = abs(Scalling.4-1))
U4Cam <- transmute(users, U4Cam = rad2deg(2*acos(Camera.W.4)))
}
if(qntusers == 1 )
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam) #put all together
if(qntusers == 2)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam) #put all together
if(qntusers == 3)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam) #put all together
if(qntusers == 4)
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam,U4Trans,U4Rot,U4Scale,U4Cam) #put all together
tidyUsers <- head(tidyUsers,-1)
tidyUsers$U1TransAsd<- lapply(tidyUsers$U1Trans, function(x) ifelse(x >0, 1, 0))
tidyUsers$U1RotAsd<- lapply(tidyUsers$U1Rot, function(x) ifelse(x >0, 2, 0))
tidyUsers$U1ScaleAsd<- lapply(tidyUsers$U1Scale, function(x) ifelse(x >0, 3, 0))
tidyUsers$U1CamAsd<- lapply(tidyUsers$U1Cam, function(x) ifelse(x >0, 4, 0))
user1 <- tidyUsers[17:20]
asd2 <- apply(user1, 1, function(x) any(x) && x[as.logical(x)][1] >0)
desired.result <- asd[asd2,]
aaa <- mutate(desired.result, SUM = as.numeric(U1RotAsd)+ as.numeric(U1TransAsd)+ as.numeric(U1ScaleAsd)+ as.numeric(U1CamAsd))
mutate(desired.result, SUM = as.numeric(U1RotAsd)+ as.numeric(U1TransAsd)+ as.numeric(U1ScaleAsd)+ as.numeric(U1CamAsd))
write.csv(t(aaa[5]),file = "aaa.csv")
savehistory("~/Documents/DataAnalysis3DController/Analysis/R/.Rhistory")
save.image("~/Documents/DataAnalysis3DController/Analysis/R/.RData")
