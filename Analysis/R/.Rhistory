U4Scale <- transmute(users, U4Scale = abs(Scalling.4-1))
U1Cam <- transmute(users, U1Cam = rad2deg(2*acos(Camera.W.1)))#angle of cam rotation
U2Cam <- transmute(users, U2Cam = rad2deg(2*acos(Camera.W.2)))
U3Cam <- transmute(users, U3Cam = rad2deg(2*acos(Camera.W.3)))
U4Cam <- transmute(users, U4Cam = rad2deg(2*acos(Camera.W.4)))
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam,U4Trans,U4Rot,U4Scale,U4Cam) #put all together
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans + U4Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale + U4Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot + U4Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Rot.1 + U2Rot.1 + U3Rot.1 + U4Rot.1) #total camera actions performed by all users;
loadTotal <- loadTrans + loadRot + loadScale + loadCam
U1Trans <- head(U1Trans,-1) # remove the last row
U2Trans <- head(U2Trans,-1)
U3Trans <- head(U3Trans,-1)
U4Trans <- head(U4Trans,-1)
U1totalTrans <- colSums(U1Trans != 0) / colSums(loadTrans != 0)
U2totalTrans <- colSums(U2Trans != 0) / colSums(loadTrans != 0)
U3totalTrans <- colSums(U3Trans != 0) / colSums(loadTrans != 0)
U4totalTrans <- colSums(U4Trans != 0) / colSums(loadTrans != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans +U3totalTrans +U4totalTrans #value >1 means parallel actions
U1Rot <- head(U1Rot,-1) # remove the last row
U2Rot <- head(U2Rot,-1)
U3Rot <- head(U3Rot,-1)
U4Rot <- head(U4Rot,-1)
U1totalRot <- colSums(U1Rot != 0) / colSums(loadRot != 0)
U2totalRot <- colSums(U2Rot != 0) / colSums(loadRot != 0)
U3totalRot <- colSums(U3Rot != 0) / colSums(loadRot != 0)
U4totalRot <- colSums(U4Rot != 0) / colSums(loadRot != 0)
allUsersTotalRot <- U1totalRot + U2totalRot +U3totalRot +U4totalRot #value >1 means parallel actions
U1Scale <- head(U1Scale,-1) # remove the last row
U2Scale <- head(U2Scale,-1)
U3Scale <- head(U3Scale,-1)
U4Scale <- head(U4Scale,-1)
U1totalScale <- colSums(U1Scale != 0) / colSums(loadScale != 0)
U2totalScale <- colSums(U2Scale != 0) / colSums(loadScale != 0)
U3totalScale <- colSums(U3Scale != 0) / colSums(loadScale != 0)
U4totalScale <- colSums(U4Scale != 0) / colSums(loadScale != 0)
allUsersTotalScale <- U1totalScale + U2totalScale +U3totalScale +U4totalScale #value >1 means parallel actions
U1Cam <- head(U1Cam,-1) # remove the last row
U2Cam <- head(U2Cam,-1)
U3Cam <- head(U3Cam,-1)
U4Cam <- head(U4Cam,-1)
U1totalCam <- colSums(U1Cam != 0) / colSums(loadCam != 0)
U2totalCam <- colSums(U2Cam != 0) / colSums(loadCam != 0)
U3totalCam <- colSums(U3Cam != 0) / colSums(loadCam != 0)
U4totalCam <- colSums(U4Cam != 0) / colSums(loadCam != 0)
allUsersTotalCam <- U1totalCam + U2totalCam +U3totalCam +U4totalCam #value >1 means parallel actions
colSums(loadTotal != 0) / nrow(loadTotal) # task total load
timeWorked <- colSums(loadTotal != 0) # get only the time worked
colSums(tidyUsers != 0) / nrow(tidyUsers) # load by total time
colSums(tidyUsers != 0) / timeWorked # load of each action of each users only in the worked period
View(U3Rot)
colSums(U1Cam != 0)
colSums(loadCam != 0)
View(U1Cam)
View(tidyUsers)
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot + U4Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam + U4Cam) #total camera actions performed by all users;
loadTotal <- loadTrans + loadRot + loadScale + loadCam
U1Trans <- head(U1Trans,-1) # remove the last row
U2Trans <- head(U2Trans,-1)
U3Trans <- head(U3Trans,-1)
U4Trans <- head(U4Trans,-1)
U1totalTrans <- colSums(U1Trans != 0) / colSums(loadTrans != 0)
U2totalTrans <- colSums(U2Trans != 0) / colSums(loadTrans != 0)
U3totalTrans <- colSums(U3Trans != 0) / colSums(loadTrans != 0)
U4totalTrans <- colSums(U4Trans != 0) / colSums(loadTrans != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans +U3totalTrans +U4totalTrans #value >1 means parallel actions
U1Rot <- head(U1Rot,-1) # remove the last row
U2Rot <- head(U2Rot,-1)
U3Rot <- head(U3Rot,-1)
U4Rot <- head(U4Rot,-1)
U1totalRot <- colSums(U1Rot != 0) / colSums(loadRot != 0)
U2totalRot <- colSums(U2Rot != 0) / colSums(loadRot != 0)
U3totalRot <- colSums(U3Rot != 0) / colSums(loadRot != 0)
U4totalRot <- colSums(U4Rot != 0) / colSums(loadRot != 0)
allUsersTotalRot <- U1totalRot + U2totalRot +U3totalRot +U4totalRot #value >1 means parallel actions
U1Scale <- head(U1Scale,-1) # remove the last row
U2Scale <- head(U2Scale,-1)
U3Scale <- head(U3Scale,-1)
U4Scale <- head(U4Scale,-1)
U1totalScale <- colSums(U1Scale != 0) / colSums(loadScale != 0)
U2totalScale <- colSums(U2Scale != 0) / colSums(loadScale != 0)
U3totalScale <- colSums(U3Scale != 0) / colSums(loadScale != 0)
U4totalScale <- colSums(U4Scale != 0) / colSums(loadScale != 0)
allUsersTotalScale <- U1totalScale + U2totalScale +U3totalScale +U4totalScale #value >1 means parallel actions
U1Cam <- head(U1Cam,-1) # remove the last row
U2Cam <- head(U2Cam,-1)
U3Cam <- head(U3Cam,-1)
U4Cam <- head(U4Cam,-1)
U1totalCam <- colSums(U1Cam != 0) / colSums(loadCam != 0)
U2totalCam <- colSums(U2Cam != 0) / colSums(loadCam != 0)
U3totalCam <- colSums(U3Cam != 0) / colSums(loadCam != 0)
U4totalCam <- colSums(U4Cam != 0) / colSums(loadCam != 0)
allUsersTotalCam <- U1totalCam + U2totalCam +U3totalCam +U4totalCam #value >1 means parallel actions
users <- select(task,ends_with(".1"),ends_with(".2"), ends_with(".3"),ends_with(".4"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
View(users)
users[users>0.999999] <- 1 # remove the noise in the data
U1Trans <- transmute(users, U1Trans = sqrt((Translation.X.1 * Translation.X.1) + (Translation.Y.1 * Translation.Y.1) + (Translation.Z.1 * Translation.Z.1))) #translation magnitude
U2Trans <- transmute(users, U2Trans = sqrt((Translation.X.2 * Translation.X.2) + (Translation.Y.2 * Translation.Y.2) + (Translation.Z.2 * Translation.Z.2)))
U3Trans <- transmute(users, U3Trans = sqrt((Translation.X.3 * Translation.X.3) + (Translation.Y.3 * Translation.Y.3) + (Translation.Z.3 * Translation.Z.3)))
U4Trans <- transmute(users, U4Trans = sqrt((Translation.X.4 * Translation.X.4) + (Translation.Y.4 * Translation.Y.4) + (Translation.Z.4 * Translation.Z.4)))
rad2deg <- function(rad) {(rad * 180) / (pi)}
U1Rot <- transmute(users, U1Rot = rad2deg(2*acos(Rotation.W.1))) #angle of rotation
U2Rot <- transmute(users, U2Rot = rad2deg(2*acos(Rotation.W.2)))
U4Rot <- transmute(users, U4Rot = rad2deg(2*acos(Rotation.W.4)))
U3Rot <- transmute(users, U3Rot = rad2deg(2*acos(Rotation.W.3)))
U1Scale <- transmute(users, U1Scale = abs(Scalling.1-1)) #scale in absolute values
U2Scale <- transmute(users, U2Scale = abs(Scalling.2-1))
U3Scale <- transmute(users, U3Scale = abs(Scalling.3-1))
U4Scale <- transmute(users, U4Scale = abs(Scalling.4-1))
U1Cam <- transmute(users, U1Cam = rad2deg(2*acos(Camera.W.1)))#angle of cam rotation
U3Cam <- transmute(users, U3Cam = rad2deg(2*acos(Camera.W.3)))
U4Cam <- transmute(users, U4Cam = rad2deg(2*acos(Camera.W.4)))
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam,U4Trans,U4Rot,U4Scale,U4Cam) #put all together
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans + U4Trans) #total translation actions performed by all users
U2Cam <- transmute(users, U2Cam = rad2deg(2*acos(Camera.W.2)))
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale + U4Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot + U4Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam + U4Cam) #total camera actions performed by all users;
U2Trans <- head(U2Trans,-1)
U3Trans <- head(U3Trans,-1)
U4Trans <- head(U4Trans,-1)
loadTotal <- loadTrans + loadRot + loadScale + loadCam
U1Trans <- head(U1Trans,-1) # remove the last row
U1totalTrans <- colSums(U1Trans != 0) / colSums(loadTrans != 0)
U2totalTrans <- colSums(U2Trans != 0) / colSums(loadTrans != 0)
users <- select(task,ends_with(".1"),ends_with(".2"), ends_with(".3"),ends_with(".4"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
users[users>0.999999] <- 1 # remove the noise in the data
U1Trans <- transmute(users, U1Trans = sqrt((Translation.X.1 * Translation.X.1) + (Translation.Y.1 * Translation.Y.1) + (Translation.Z.1 * Translation.Z.1))) #translation magnitude
U2Trans <- transmute(users, U2Trans = sqrt((Translation.X.2 * Translation.X.2) + (Translation.Y.2 * Translation.Y.2) + (Translation.Z.2 * Translation.Z.2)))
U3Trans <- transmute(users, U3Trans = sqrt((Translation.X.3 * Translation.X.3) + (Translation.Y.3 * Translation.Y.3) + (Translation.Z.3 * Translation.Z.3)))
U4Trans <- transmute(users, U4Trans = sqrt((Translation.X.4 * Translation.X.4) + (Translation.Y.4 * Translation.Y.4) + (Translation.Z.4 * Translation.Z.4)))
rad2deg <- function(rad) {(rad * 180) / (pi)}
U1Rot <- transmute(users, U1Rot = rad2deg(2*acos(Rotation.W.1))) #angle of rotation
U2Rot <- transmute(users, U2Rot = rad2deg(2*acos(Rotation.W.2)))
U3Rot <- transmute(users, U3Rot = rad2deg(2*acos(Rotation.W.3)))
U4Rot <- transmute(users, U4Rot = rad2deg(2*acos(Rotation.W.4)))
U1Scale <- transmute(users, U1Scale = abs(Scalling.1-1)) #scale in absolute values
U2Scale <- transmute(users, U2Scale = abs(Scalling.2-1))
U3Scale <- transmute(users, U3Scale = abs(Scalling.3-1))
U4Scale <- transmute(users, U4Scale = abs(Scalling.4-1))
U1Cam <- transmute(users, U1Cam = rad2deg(2*acos(Camera.W.1)))#angle of cam rotation
U2Cam <- transmute(users, U2Cam = rad2deg(2*acos(Camera.W.2)))
U3Cam <- transmute(users, U3Cam = rad2deg(2*acos(Camera.W.3)))
U4Cam <- transmute(users, U4Cam = rad2deg(2*acos(Camera.W.4)))
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam,U4Trans,U4Rot,U4Scale,U4Cam) #put all together
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans + U4Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale + U4Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot + U4Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam + U4Cam) #total camera actions performed by all users;
loadTotal <- loadTrans + loadRot + loadScale + loadCam
U1Trans <- head(U1Trans,-1) # remove the last row
U2Trans <- head(U2Trans,-1)
U3Trans <- head(U3Trans,-1)
U4Trans <- head(U4Trans,-1)
U1totalTrans <- colSums(U1Trans != 0) / colSums(loadTrans != 0)
U2totalTrans <- colSums(U2Trans != 0) / colSums(loadTrans != 0)
U3totalTrans <- colSums(U3Trans != 0) / colSums(loadTrans != 0)
U4totalTrans <- colSums(U4Trans != 0) / colSums(loadTrans != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans +U3totalTrans +U4totalTrans #value >1 means parallel actions
U1Rot <- head(U1Rot,-1) # remove the last row
U2Rot <- head(U2Rot,-1)
U3Rot <- head(U3Rot,-1)
U4Rot <- head(U4Rot,-1)
U1totalRot <- colSums(U1Rot != 0) / colSums(loadRot != 0)
U2totalRot <- colSums(U2Rot != 0) / colSums(loadRot != 0)
U3totalRot <- colSums(U3Rot != 0) / colSums(loadRot != 0)
U4totalRot <- colSums(U4Rot != 0) / colSums(loadRot != 0)
allUsersTotalRot <- U1totalRot + U2totalRot +U3totalRot +U4totalRot #value >1 means parallel actions
U1Scale <- head(U1Scale,-1) # remove the last row
U2Scale <- head(U2Scale,-1)
U3Scale <- head(U3Scale,-1)
U4Scale <- head(U4Scale,-1)
U1totalScale <- colSums(U1Scale != 0) / colSums(loadScale != 0)
U2totalScale <- colSums(U2Scale != 0) / colSums(loadScale != 0)
U3totalScale <- colSums(U3Scale != 0) / colSums(loadScale != 0)
U4totalScale <- colSums(U4Scale != 0) / colSums(loadScale != 0)
allUsersTotalScale <- U1totalScale + U2totalScale +U3totalScale +U4totalScale #value >1 means parallel actions
U1Cam <- head(U1Cam,-1) # remove the last row
U2Cam <- head(U2Cam,-1)
U3Cam <- head(U3Cam,-1)
U4Cam <- head(U4Cam,-1)
U1totalCam <- colSums(U1Cam != 0) / colSums(loadCam != 0)
U2totalCam <- colSums(U2Cam != 0) / colSums(loadCam != 0)
U3totalCam <- colSums(U3Cam != 0) / colSums(loadCam != 0)
U4totalCam <- colSums(U4Cam != 0) / colSums(loadCam != 0)
allUsersTotalCam <- U1totalCam + U2totalCam +U3totalCam +U4totalCam #value >1 means parallel actions
colSums(loadTotal != 0) / nrow(loadTotal) # task total load
View(U4Trans)
colSums(U4Cam != 0)
colSums(loadCam != 0)
View(loadCam)
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans + U4Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale + U4Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot + U4Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam + U4Cam) #total camera actions performed by all users;
loadTotal <- loadTrans + loadRot + loadScale + loadCam
loadTrans <- head(loadTrans,-1) # remove the last row
loadScale <- head(loadScale,-1)
loadRot <- head(loadRot,-1)
loadCam <- head(loadCam,-1)
U1Trans <- head(U1Trans,-1) # remove the last row
U2Trans <- head(U2Trans,-1)
U3Trans <- head(U3Trans,-1)
U4Trans <- head(U4Trans,-1)
U1totalTrans <- colSums(U1Trans != 0) / colSums(loadTrans != 0)
U2totalTrans <- colSums(U2Trans != 0) / colSums(loadTrans != 0)
U3totalTrans <- colSums(U3Trans != 0) / colSums(loadTrans != 0)
U4totalTrans <- colSums(U4Trans != 0) / colSums(loadTrans != 0)
users <- select(task,ends_with(".1"),ends_with(".2"), ends_with(".3"),ends_with(".4"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
users[users>0.999999] <- 1 # remove the noise in the data
U1Trans <- transmute(users, U1Trans = sqrt((Translation.X.1 * Translation.X.1) + (Translation.Y.1 * Translation.Y.1) + (Translation.Z.1 * Translation.Z.1))) #translation magnitude
U2Trans <- transmute(users, U2Trans = sqrt((Translation.X.2 * Translation.X.2) + (Translation.Y.2 * Translation.Y.2) + (Translation.Z.2 * Translation.Z.2)))
U3Trans <- transmute(users, U3Trans = sqrt((Translation.X.3 * Translation.X.3) + (Translation.Y.3 * Translation.Y.3) + (Translation.Z.3 * Translation.Z.3)))
U4Trans <- transmute(users, U4Trans = sqrt((Translation.X.4 * Translation.X.4) + (Translation.Y.4 * Translation.Y.4) + (Translation.Z.4 * Translation.Z.4)))
rad2deg <- function(rad) {(rad * 180) / (pi)}
U1Rot <- transmute(users, U1Rot = rad2deg(2*acos(Rotation.W.1))) #angle of rotation
U2Rot <- transmute(users, U2Rot = rad2deg(2*acos(Rotation.W.2)))
U3Rot <- transmute(users, U3Rot = rad2deg(2*acos(Rotation.W.3)))
U4Rot <- transmute(users, U4Rot = rad2deg(2*acos(Rotation.W.4)))
U1Scale <- transmute(users, U1Scale = abs(Scalling.1-1)) #scale in absolute values
U2Scale <- transmute(users, U2Scale = abs(Scalling.2-1))
U3Scale <- transmute(users, U3Scale = abs(Scalling.3-1))
U4Scale <- transmute(users, U4Scale = abs(Scalling.4-1))
U1Cam <- transmute(users, U1Cam = rad2deg(2*acos(Camera.W.1)))#angle of cam rotation
U2Cam <- transmute(users, U2Cam = rad2deg(2*acos(Camera.W.2)))
U3Cam <- transmute(users, U3Cam = rad2deg(2*acos(Camera.W.3)))
U4Cam <- transmute(users, U4Cam = rad2deg(2*acos(Camera.W.4)))
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam,U4Trans,U4Rot,U4Scale,U4Cam) #put all together
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans + U4Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale + U4Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot + U4Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam + U4Cam) #total camera actions performed by all users;
loadTotal <- loadTrans + loadRot + loadScale + loadCam
loadTrans <- head(loadTrans,-1) # remove the last row
loadScale <- head(loadScale,-1)
loadRot <- head(loadRot,-1)
loadCam <- head(loadCam,-1)
U1Trans <- head(U1Trans,-1) # remove the last row
U2Trans <- head(U2Trans,-1)
U3Trans <- head(U3Trans,-1)
U4Trans <- head(U4Trans,-1)
U1totalTrans <- colSums(U1Trans != 0) / colSums(loadTrans != 0)
U2totalTrans <- colSums(U2Trans != 0) / colSums(loadTrans != 0)
U3totalTrans <- colSums(U3Trans != 0) / colSums(loadTrans != 0)
U4totalTrans <- colSums(U4Trans != 0) / colSums(loadTrans != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans +U3totalTrans +U4totalTrans #value >1 means parallel actions
U1Rot <- head(U1Rot,-1) # remove the last row
U2Rot <- head(U2Rot,-1)
U3Rot <- head(U3Rot,-1)
U4Rot <- head(U4Rot,-1)
U1totalRot <- colSums(U1Rot != 0) / colSums(loadRot != 0)
U2totalRot <- colSums(U2Rot != 0) / colSums(loadRot != 0)
U3totalRot <- colSums(U3Rot != 0) / colSums(loadRot != 0)
U4totalRot <- colSums(U4Rot != 0) / colSums(loadRot != 0)
allUsersTotalRot <- U1totalRot + U2totalRot +U3totalRot +U4totalRot #value >1 means parallel actions
U1Scale <- head(U1Scale,-1) # remove the last row
U2Scale <- head(U2Scale,-1)
U3Scale <- head(U3Scale,-1)
U4Scale <- head(U4Scale,-1)
U1totalScale <- colSums(U1Scale != 0) / colSums(loadScale != 0)
U2totalScale <- colSums(U2Scale != 0) / colSums(loadScale != 0)
U3totalScale <- colSums(U3Scale != 0) / colSums(loadScale != 0)
U4totalScale <- colSums(U4Scale != 0) / colSums(loadScale != 0)
allUsersTotalScale <- U1totalScale + U2totalScale +U3totalScale +U4totalScale #value >1 means parallel actions
U1Cam <- head(U1Cam,-1) # remove the last row
U2Cam <- head(U2Cam,-1)
U3Cam <- head(U3Cam,-1)
U4Cam <- head(U4Cam,-1)
U1totalCam <- colSums(U1Cam != 0) / colSums(loadCam != 0)
U2totalCam <- colSums(U2Cam != 0) / colSums(loadCam != 0)
U3totalCam <- colSums(U3Cam != 0) / colSums(loadCam != 0)
U4totalCam <- colSums(U4Cam != 0) / colSums(loadCam != 0)
allUsersTotalCam <- U1totalCam + U2totalCam +U3totalCam +U4totalCam #value >1 means parallel actions
colSums(loadTotal != 0) / nrow(loadTotal)
nrow(loadTotal)
colSums(loadTotal != 0)
View(loadTrans)
loadTotal <- head(loadTotal,-1)
colSums(loadTotal != 0)
colSums(loadTotal != 0) / nrow(loadTotal)
View(tidyUsers)
colSums(tidyUsers$U1Trans != 0) / colSums(loadTrans != 0)
colSums(tidyUsers$U1Trans != 0)
colSums(tidyUsers$U1Trans[] != 0)
colSums(tidyUsers$U1Trans[,] != 0)
colSums(tidyUsers$U1Trans[,,] != 0)
colSums(tidyUsers$U1Trans[[]] != 0)
colSums(tidyUsers$U1Trans[[1]] != 0)
colSums(tidyUsers$U1Trans[1 != 0)
colSums(tidyUsers$U1Trans[1] != 0)
colSums(tidyUsers != 0) / timeWorked
timeWorked <- colSums(loadTotal != 0)
colSums(tidyUsers != 0) / timeWorked
colSums(tidyUsers != 0)
View(tidyUsers)
colSums(tidyUsers != 0) / nrow(tidyUsers)
tidyUsers <- head(tidyUsers,-1)
colSums(tidyUsers != 0) / nrow(tidyUsers)
colSums(tidyUsers != 0) / timeWorked
combine(timeWorked,U1totalCam)
bind_rows(timeWorked,U1totalCam)
bind_rows(U4Cam,U4Trans)
b <- bind_rows(U4Cam,U4Trans)
colSums(loadTotal != 0) / nrow(loadTotal)
colSums(tidyUsers != 0) / nrow(tidyUsers)
taskTotalLoad <- colSums(loadTotal != 0) / nrow(loadTotal) # task total load
loadByTotalTime <- colSums(tidyUsers != 0) / nrow(tidyUsers) # load of each action of each users by total time
loadByWorkedTime <- colSums(tidyUsers != 0) / timeWorked # load of each action of each users only in the worked period
comp <- data.frame(loadByTotalTime,loadByWorkedTime,U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,U4totalTrans,U4totalRot,U4totalScale,U4totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
View(comp)
comp <- data.frame(loadByTotalTime,loadByWorkedTime)
comp <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,U4totalTrans,U4totalRot,U4totalScale,U4totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
comp <- U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,U4totalTrans,U4totalRot,U4totalScale,U4totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam
comp <-bind_rows(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,U4totalTrans,U4totalRot,U4totalScale,U4totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
comp2 <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,U4totalTrans,U4totalRot,U4totalScale,U4totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
comp <-bind_rows(comp,comp2)
View(comp)
loadByTotalTime <- colSums(tidyUsers != 0) / nrow(tidyUsers) # load of each action of each users by total time
loadByWorkedTime <- colSums(tidyUsers != 0) / timeWorked # load of each action of each users only in the worked period
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,U4totalTrans,U4totalRot,U4totalScale,U4totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
View(loadPerUser)
loadByTotalTime <- data.frame(colSums(tidyUsers != 0) / nrow(tidyUsers)) # load of each action of each users by total time
View(loadByTotalTime)
loadByTotalTime <- as.data.frame(colSums(tidyUsers != 0) / nrow(tidyUsers)) # load of each action of each users by total time
View(loadByTotalTime)
aperm(loadByTotalTime)
loadByTotalTime <- colSums(tidyUsers != 0) / nrow(tidyUsers) # load of each action of each users by total time
aperm(loadByTotalTime)
loadByTotalTime <- colSums(tidyUsers != 0) / nrow(tidyUsers) # load of each action of each users by total timeloadByTotalTime <- as.data.frame(colSums(tidyUsers != 0) / nrow(tidyUsers))
loadByTotalTime <- as.data.frame(colSums(tidyUsers != 0) / nrow(tidyUsers))
loadByTotalTime <- t(loadByTotalTime)
View(loadByTotalTime)
taskTotalLoad <- colSums(loadTotal != 0) / nrow(loadTotal)
taskTotalLoad <- as.data.frame(colSums(loadTotal != 0) / nrow(loadTotal))
View(taskTotalLoad)
taskTotalLoad <- t(taskTotalLoad)
View(loadByTotalTime)
View(loadByTotalTime)
bind_cols(loadByTotalTime,taskTotalLoad)
View(loadByTotalTime)
taskTotalLoad <- colSums(loadTotal != 0) / nrow(loadTotal) # task total load
timeWorked <- colSums(loadTotal != 0) # get only the time worked
loadByTotalTime <- colSums(tidyUsers != 0) / nrow(tidyUsers) # load of each action of each users by total time
loadByWorkedTime <- colSums(tidyUsers != 0) / timeWorked # load of each action of each users only in the worked period
`Task3-20` <- read.csv("~/GitHub/DataAnalysis3DController/temp/20-Task3-2016-06-10-16-47-08.csv")
View(`Task3-20`)
users <- select(Task3-20,ends_with(".1"),ends_with(".2"), ends_with(".3"),ends_with(".4"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
users <- select(`Task3-20`,ends_with(".1"),ends_with(".2"), ends_with(".3"),ends_with(".4"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
users[users>0.999999] <- 1 # remove the noise in the data
U1Trans <- transmute(users, U1Trans = sqrt((Translation.X.1 * Translation.X.1) + (Translation.Y.1 * Translation.Y.1) + (Translation.Z.1 * Translation.Z.1))) #translation magnitude
U2Trans <- transmute(users, U2Trans = sqrt((Translation.X.2 * Translation.X.2) + (Translation.Y.2 * Translation.Y.2) + (Translation.Z.2 * Translation.Z.2)))
U3Trans <- transmute(users, U3Trans = sqrt((Translation.X.3 * Translation.X.3) + (Translation.Y.3 * Translation.Y.3) + (Translation.Z.3 * Translation.Z.3)))
U4Trans <- transmute(users, U4Trans = sqrt((Translation.X.4 * Translation.X.4) + (Translation.Y.4 * Translation.Y.4) + (Translation.Z.4 * Translation.Z.4)))
rad2deg <- function(rad) {(rad * 180) / (pi)}
U1Rot <- transmute(users, U1Rot = rad2deg(2*acos(Rotation.W.1))) #angle of rotation
U2Rot <- transmute(users, U2Rot = rad2deg(2*acos(Rotation.W.2)))
U3Rot <- transmute(users, U3Rot = rad2deg(2*acos(Rotation.W.3)))
U4Rot <- transmute(users, U4Rot = rad2deg(2*acos(Rotation.W.4)))
U1Scale <- transmute(users, U1Scale = abs(Scalling.1-1)) #scale in absolute values
U2Scale <- transmute(users, U2Scale = abs(Scalling.2-1))
U3Scale <- transmute(users, U3Scale = abs(Scalling.3-1))
U4Scale <- transmute(users, U4Scale = abs(Scalling.4-1))
U1Cam <- transmute(users, U1Cam = rad2deg(2*acos(Camera.W.1)))#angle of cam rotation
U2Cam <- transmute(users, U2Cam = rad2deg(2*acos(Camera.W.2)))
U3Cam <- transmute(users, U3Cam = rad2deg(2*acos(Camera.W.3)))
U4Cam <- transmute(users, U4Cam = rad2deg(2*acos(Camera.W.4)))
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam,U4Trans,U4Rot,U4Scale,U4Cam) #put all together
tidyUsers <- head(tidyUsers,-1)
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans + U4Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale + U4Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot + U4Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam + U4Cam) #total camera actions performed by all users;
loadTotal <- loadTrans + loadRot + loadScale + loadCam
loadTrans <- head(loadTrans,-1) # remove the last row
loadScale <- head(loadScale,-1)
loadRot <- head(loadRot,-1)
loadCam <- head(loadCam,-1)
loadTotal <- head(loadTotal,-1)
U1Trans <- head(U1Trans,-1) # remove the last row
U2Trans <- head(U2Trans,-1)
U3Trans <- head(U3Trans,-1)
U4Trans <- head(U4Trans,-1)
U1totalTrans <- colSums(U1Trans != 0) / colSums(loadTrans != 0)
U2totalTrans <- colSums(U2Trans != 0) / colSums(loadTrans != 0)
U3totalTrans <- colSums(U3Trans != 0) / colSums(loadTrans != 0)
U4totalTrans <- colSums(U4Trans != 0) / colSums(loadTrans != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans +U3totalTrans +U4totalTrans #value >1 means parallel actions
U1Rot <- head(U1Rot,-1) # remove the last row
U2Rot <- head(U2Rot,-1)
U3Rot <- head(U3Rot,-1)
U4Rot <- head(U4Rot,-1)
U1totalRot <- colSums(U1Rot != 0) / colSums(loadRot != 0)
U2totalRot <- colSums(U2Rot != 0) / colSums(loadRot != 0)
U3totalRot <- colSums(U3Rot != 0) / colSums(loadRot != 0)
U4totalRot <- colSums(U4Rot != 0) / colSums(loadRot != 0)
allUsersTotalRot <- U1totalRot + U2totalRot +U3totalRot +U4totalRot #value >1 means parallel actions
U1Scale <- head(U1Scale,-1) # remove the last row
U2Scale <- head(U2Scale,-1)
U3Scale <- head(U3Scale,-1)
U4Scale <- head(U4Scale,-1)
U1totalScale <- colSums(U1Scale != 0) / colSums(loadScale != 0)
U2totalScale <- colSums(U2Scale != 0) / colSums(loadScale != 0)
U3totalScale <- colSums(U3Scale != 0) / colSums(loadScale != 0)
U4totalScale <- colSums(U4Scale != 0) / colSums(loadScale != 0)
allUsersTotalScale <- U1totalScale + U2totalScale +U3totalScale +U4totalScale #value >1 means parallel actions
U1Cam <- head(U1Cam,-1) # remove the last row
U2Cam <- head(U2Cam,-1)
U3Cam <- head(U3Cam,-1)
U4Cam <- head(U4Cam,-1)
U1totalCam <- colSums(U1Cam != 0) / colSums(loadCam != 0)
U2totalCam <- colSums(U2Cam != 0) / colSums(loadCam != 0)
U3totalCam <- colSums(U3Cam != 0) / colSums(loadCam != 0)
U4totalCam <- colSums(U4Cam != 0) / colSums(loadCam != 0)
allUsersTotalCam <- U1totalCam + U2totalCam +U3totalCam +U4totalCam #value >1 means parallel actions
taskTotalLoad <- colSums(loadTotal != 0) / nrow(loadTotal) # task total load
timeWorked <- colSums(loadTotal != 0) # get only the time worked
loadByTotalTime <- colSums(tidyUsers != 0) / nrow(tidyUsers) # load of each action of each users by total time
loadByWorkedTime <- colSums(tidyUsers != 0) / timeWorked # load of each action of each users only in the worked period
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,U4totalTrans,U4totalRot,U4totalScale,U4totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
View(loadPerUser)
G9Task3 <- read.csv("~/GitHub/DataAnalysis3DController/temp/9-Task3-2016-06-07-15-31-01.csv")
View(G9Task3)
users <- select(G9Task3,ends_with(".1"),ends_with(".2"), ends_with(".3"),ends_with(".4"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
users[users>0.999999] <- 1 # remove the noise in the data
U1Trans <- transmute(users, U1Trans = sqrt((Translation.X.1 * Translation.X.1) + (Translation.Y.1 * Translation.Y.1) + (Translation.Z.1 * Translation.Z.1))) #translation magnitude
U2Trans <- transmute(users, U2Trans = sqrt((Translation.X.2 * Translation.X.2) + (Translation.Y.2 * Translation.Y.2) + (Translation.Z.2 * Translation.Z.2)))
U3Trans <- transmute(users, U3Trans = sqrt((Translation.X.3 * Translation.X.3) + (Translation.Y.3 * Translation.Y.3) + (Translation.Z.3 * Translation.Z.3)))
U4Trans <- transmute(users, U4Trans = sqrt((Translation.X.4 * Translation.X.4) + (Translation.Y.4 * Translation.Y.4) + (Translation.Z.4 * Translation.Z.4)))
View(users)
users <- select(G9Task3,ends_with(".1"),ends_with(".2"), ends_with(".3"),ends_with(".4"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
View(users)
users <- select(G9Task3,ends_with(".1"),ends_with(".2"), ends_with(".3"), -starts_with("User"),-starts_with("Con")) #select only user action in object transformation
View(users)
users[users>0.999999] <- 1 # remove the noise in the data
U1Trans <- transmute(users, U1Trans = sqrt((Translation.X.1 * Translation.X.1) + (Translation.Y.1 * Translation.Y.1) + (Translation.Z.1 * Translation.Z.1))) #translation magnitude
U2Trans <- transmute(users, U2Trans = sqrt((Translation.X.2 * Translation.X.2) + (Translation.Y.2 * Translation.Y.2) + (Translation.Z.2 * Translation.Z.2)))
U3Trans <- transmute(users, U3Trans = sqrt((Translation.X.3 * Translation.X.3) + (Translation.Y.3 * Translation.Y.3) + (Translation.Z.3 * Translation.Z.3)))
U4Trans <- transmute(users, U4Trans = sqrt((Translation.X.4 * Translation.X.4) + (Translation.Y.4 * Translation.Y.4) + (Translation.Z.4 * Translation.Z.4)))
rad2deg <- function(rad) {(rad * 180) / (pi)}
U1Rot <- transmute(users, U1Rot = rad2deg(2*acos(Rotation.W.1))) #angle of rotation
U2Rot <- transmute(users, U2Rot = rad2deg(2*acos(Rotation.W.2)))
U3Rot <- transmute(users, U3Rot = rad2deg(2*acos(Rotation.W.3)))
U4Rot <- transmute(users, U4Rot = rad2deg(2*acos(Rotation.W.4)))
U1Scale <- transmute(users, U1Scale = abs(Scalling.1-1)) #scale in absolute values
U2Scale <- transmute(users, U2Scale = abs(Scalling.2-1))
U3Scale <- transmute(users, U3Scale = abs(Scalling.3-1))
U4Scale <- transmute(users, U4Scale = abs(Scalling.4-1))
U1Cam <- transmute(users, U1Cam = rad2deg(2*acos(Camera.W.1)))#angle of cam rotation
U2Cam <- transmute(users, U2Cam = rad2deg(2*acos(Camera.W.2)))
U3Cam <- transmute(users, U3Cam = rad2deg(2*acos(Camera.W.3)))
U4Cam <- transmute(users, U4Cam = rad2deg(2*acos(Camera.W.4)))
tidyUsers <- data.frame(U1Trans,U1Rot,U1Scale,U1Cam,U2Trans,U2Rot,U2Scale,U2Cam,U3Trans,U3Rot,U3Scale,U3Cam,U4Trans,U4Rot,U4Scale,U4Cam) #put all together
tidyUsers <- head(tidyUsers,-1)
loadTrans <- transmute(tidyUsers, loadTrans = U1Trans + U2Trans + U3Trans + U4Trans) #total translation actions performed by all users
loadScale <- transmute(tidyUsers, loadScale = U1Scale + U2Scale + U3Scale + U4Scale) #total scale actions performed by all users
loadRot <- transmute(tidyUsers, loadRot = U1Rot + U2Rot + U3Rot + U4Rot) #total rotation actions performed by all users
loadCam <- transmute(tidyUsers, loadCam = U1Cam + U2Cam + U3Cam + U4Cam) #total camera actions performed by all users;
View(loadRot)
loadTotal <- loadTrans + loadRot + loadScale + loadCam
loadTrans <- head(loadTrans,-1) # remove the last row
loadScale <- head(loadScale,-1)
loadRot <- head(loadRot,-1)
loadCam <- head(loadCam,-1)
loadTotal <- head(loadTotal,-1)
U1Trans <- head(U1Trans,-1) # remove the last row
U2Trans <- head(U2Trans,-1)
U3Trans <- head(U3Trans,-1)
U4Trans <- head(U4Trans,-1)
U1totalTrans <- colSums(U1Trans != 0) / colSums(loadTrans != 0)
U2totalTrans <- colSums(U2Trans != 0) / colSums(loadTrans != 0)
U3totalTrans <- colSums(U3Trans != 0) / colSums(loadTrans != 0)
U4totalTrans <- colSums(U4Trans != 0) / colSums(loadTrans != 0)
allUsersTotalTrans <- U1totalTrans + U2totalTrans +U3totalTrans +U4totalTrans #value >1 means parallel actions
U1Rot <- head(U1Rot,-1) # remove the last row
U2Rot <- head(U2Rot,-1)
U3Rot <- head(U3Rot,-1)
U4Rot <- head(U4Rot,-1)
U1totalRot <- colSums(U1Rot != 0) / colSums(loadRot != 0)
U2totalRot <- colSums(U2Rot != 0) / colSums(loadRot != 0)
U3totalRot <- colSums(U3Rot != 0) / colSums(loadRot != 0)
U4totalRot <- colSums(U4Rot != 0) / colSums(loadRot != 0)
allUsersTotalRot <- U1totalRot + U2totalRot +U3totalRot +U4totalRot #value >1 means parallel actions
U1Scale <- head(U1Scale,-1) # remove the last row
U2Scale <- head(U2Scale,-1)
U3Scale <- head(U3Scale,-1)
U4Scale <- head(U4Scale,-1)
U1totalScale <- colSums(U1Scale != 0) / colSums(loadScale != 0)
U2totalScale <- colSums(U2Scale != 0) / colSums(loadScale != 0)
U3totalScale <- colSums(U3Scale != 0) / colSums(loadScale != 0)
U4totalScale <- colSums(U4Scale != 0) / colSums(loadScale != 0)
allUsersTotalScale <- U1totalScale + U2totalScale +U3totalScale +U4totalScale #value >1 means parallel actions
U1Cam <- head(U1Cam,-1) # remove the last row
U2Cam <- head(U2Cam,-1)
U3Cam <- head(U3Cam,-1)
U4Cam <- head(U4Cam,-1)
U1totalCam <- colSums(U1Cam != 0) / colSums(loadCam != 0)
U2totalCam <- colSums(U2Cam != 0) / colSums(loadCam != 0)
U3totalCam <- colSums(U3Cam != 0) / colSums(loadCam != 0)
U4totalCam <- colSums(U4Cam != 0) / colSums(loadCam != 0)
allUsersTotalCam <- U1totalCam + U2totalCam +U3totalCam +U4totalCam #value >1 means parallel actions
taskTotalLoad <- colSums(loadTotal != 0) / nrow(loadTotal) # task total load
timeWorked <- colSums(loadTotal != 0) # get only the time worked
loadByTotalTime <- colSums(tidyUsers != 0) / nrow(tidyUsers) # load of each action of each users by total time
loadByWorkedTime <- colSums(tidyUsers != 0) / timeWorked # load of each action of each users only in the worked period
loadPerUser <- data.frame(U1totalTrans,U1totalRot,U1totalScale,U1totalCam,U2totalTrans,U2totalRot,U2totalScale,U2totalCam,U3totalTrans,U3totalRot,U3totalScale,U3totalCam,U4totalTrans,U4totalRot,U4totalScale,U4totalCam,allUsersTotalTrans,allUsersTotalRot,allUsersTotalScale,allUsersTotalCam)
View(loadPerUser)
save.image("~/GitHub/DataAnalysis3DController/Analysis/R/RWorkSpace.RData")
savehistory("~/GitHub/DataAnalysis3DController/Analysis/R/.Rhistory")
save.image("~/GitHub/DataAnalysis3DController/Analysis/R/.RData")
savehistory("~/GitHub/DataAnalysis3DController/Analysis/R/.Rhistory")
